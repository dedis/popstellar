// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	kyber "go.dedis.ch/kyber/v3"

	message "popstellar/internal/handler/message/mmessage"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckPrevCreateOrCloseID provides a mock function with given fields: oldchannel, nextID
func (_m *Repository) CheckPrevCreateOrCloseID(channel string, nextID string) (bool, error) {
	ret := _m.Called(channel, nextID)

	if len(ret) == 0 {
		panic("no return value specified for CheckPrevCreateOrCloseID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(channel, nextID)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(channel, nextID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channel, nextID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPrevOpenOrReopenID provides a mock function with given fields: oldchannel, nextID
func (_m *Repository) CheckPrevOpenOrReopenID(channel string, nextID string) (bool, error) {
	ret := _m.Called(channel, nextID)

	if len(ret) == 0 {
		panic("no return value specified for CheckPrevOpenOrReopenID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(channel, nextID)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(channel, nextID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channel, nextID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaoWitnesses provides a mock function with given fields: laoID
func (_m *Repository) GetLaoWitnesses(laoID string) (map[string]struct{}, error) {
	ret := _m.Called(laoID)

	if len(ret) == 0 {
		panic("no return value specified for GetLaoWitnesses")
	}

	var r0 map[string]struct{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]struct{}, error)); ok {
		return rf(laoID)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]struct{}); ok {
		r0 = rf(laoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(laoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizerPubKey provides a mock function with given fields: laoID
func (_m *Repository) GetOrganizerPubKey(laoID string) (kyber.Point, error) {
	ret := _m.Called(laoID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizerPubKey")
	}

	var r0 kyber.Point
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (kyber.Point, error)); ok {
		return rf(laoID)
	}
	if rf, ok := ret.Get(0).(func(string) kyber.Point); ok {
		r0 = rf(laoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kyber.Point)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(laoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRollCallState provides a mock function with given fields: oldchannel
func (_m *Repository) GetRollCallState(channel string) (string, error) {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for GetRollCallState")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(channel)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasMessage provides a mock function with given fields: messageID
func (_m *Repository) HasMessage(messageID string) (bool, error) {
	ret := _m.Called(messageID)

	if len(ret) == 0 {
		panic("no return value specified for HasMessage")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(messageID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(messageID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreElection provides a mock function with given fields: laoPath, electionPath, electionPubKey, electionSecretKey, msg
func (_m *Repository) StoreElection(laoPath string, electionPath string, electionPubKey kyber.Point, electionSecretKey kyber.Scalar, msg message.Message) error {
	ret := _m.Called(laoPath, electionPath, electionPubKey, electionSecretKey, msg)

	if len(ret) == 0 {
		panic("no return value specified for StoreElection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, kyber.Point, kyber.Scalar, message.Message) error); ok {
		r0 = rf(laoPath, electionPath, electionPubKey, electionSecretKey, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreElectionWithElectionKey provides a mock function with given fields: laoPath, electionPath, electionPubKey, electionSecretKey, msg, electionKeyMsg
func (_m *Repository) StoreElectionWithElectionKey(laoPath string, electionPath string, electionPubKey kyber.Point, electionSecretKey kyber.Scalar, msg message.Message, electionKeyMsg message.Message) error {
	ret := _m.Called(laoPath, electionPath, electionPubKey, electionSecretKey, msg, electionKeyMsg)

	if len(ret) == 0 {
		panic("no return value specified for StoreElectionWithElectionKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, kyber.Point, kyber.Scalar, message.Message, message.Message) error); ok {
		r0 = rf(laoPath, electionPath, electionPubKey, electionSecretKey, msg, electionKeyMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreMessageAndData provides a mock function with given fields: channelID, msg
func (_m *Repository) StoreMessageAndData(channelID string, msg message.Message) error {
	ret := _m.Called(channelID, msg)

	if len(ret) == 0 {
		panic("no return value specified for StoreMessageAndData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, message.Message) error); ok {
		r0 = rf(channelID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreRollCallClose provides a mock function with given fields: channels, laoID, msg
func (_m *Repository) StoreRollCallClose(channels []string, laoID string, msg message.Message) error {
	ret := _m.Called(channels, laoID, msg)

	if len(ret) == 0 {
		panic("no return value specified for StoreRollCallClose")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, message.Message) error); ok {
		r0 = rf(channels, laoID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
