// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	message "popstellar/internal/handler/message/mmessage"
	"popstellar/internal/message/messagedata/mfederation"

	kyber "go.dedis.ch/kyber/v3"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetFederationExpect provides a mock function with given fields: senderPk, remotePk, Challenge, channelPath
func (_m *Repository) GetFederationExpect(senderPk string, remotePk string, Challenge mfederation.FederationChallenge, channelPath string) (mfederation.FederationExpect, error) {
	ret := _m.Called(senderPk, remotePk, Challenge, channelPath)

	if len(ret) == 0 {
		panic("no return value specified for GetFederationExpect")
	}

	var r0 mfederation.FederationExpect
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, mfederation.FederationChallenge, string) (mfederation.FederationExpect, error)); ok {
		return rf(senderPk, remotePk, Challenge, channelPath)
	}
	if rf, ok := ret.Get(0).(func(string, string, mfederation.FederationChallenge, string) mfederation.FederationExpect); ok {
		r0 = rf(senderPk, remotePk, Challenge, channelPath)
	} else {
		r0 = ret.Get(0).(mfederation.FederationExpect)
	}

	if rf, ok := ret.Get(1).(func(string, string, mfederation.FederationChallenge, string) error); ok {
		r1 = rf(senderPk, remotePk, Challenge, channelPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFederationInit provides a mock function with given fields: senderPk, remotePk, Challenge, channelPath
func (_m *Repository) GetFederationInit(senderPk string, remotePk string, Challenge mfederation.FederationChallenge, channelPath string) (mfederation.FederationInit, error) {
	ret := _m.Called(senderPk, remotePk, Challenge, channelPath)

	if len(ret) == 0 {
		panic("no return value specified for GetFederationInit")
	}

	var r0 mfederation.FederationInit
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, mfederation.FederationChallenge, string) (mfederation.FederationInit, error)); ok {
		return rf(senderPk, remotePk, Challenge, channelPath)
	}
	if rf, ok := ret.Get(0).(func(string, string, mfederation.FederationChallenge, string) mfederation.FederationInit); ok {
		r0 = rf(senderPk, remotePk, Challenge, channelPath)
	} else {
		r0 = ret.Get(0).(mfederation.FederationInit)
	}

	if rf, ok := ret.Get(1).(func(string, string, mfederation.FederationChallenge, string) error); ok {
		r1 = rf(senderPk, remotePk, Challenge, channelPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizerPubKey provides a mock function with given fields: laoID
func (_m *Repository) GetOrganizerPubKey(laoID string) (kyber.Point, error) {
	ret := _m.Called(laoID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizerPubKey")
	}

	var r0 kyber.Point
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (kyber.Point, error)); ok {
		return rf(laoID)
	}
	if rf, ok := ret.Get(0).(func(string) kyber.Point); ok {
		r0 = rf(laoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kyber.Point)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(laoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerKeys provides a mock function with given fields:
func (_m *Repository) GetServerKeys() (kyber.Point, kyber.Scalar, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerKeys")
	}

	var r0 kyber.Point
	var r1 kyber.Scalar
	var r2 error
	if rf, ok := ret.Get(0).(func() (kyber.Point, kyber.Scalar, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() kyber.Point); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kyber.Point)
		}
	}

	if rf, ok := ret.Get(1).(func() kyber.Scalar); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(kyber.Scalar)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsChallengeValid provides a mock function with given fields: senderPk, challenge, channelPath
func (_m *Repository) IsChallengeValid(senderPk string, challenge mfederation.FederationChallenge, channelPath string) error {
	ret := _m.Called(senderPk, challenge, channelPath)

	if len(ret) == 0 {
		panic("no return value specified for IsChallengeValid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, mfederation.FederationChallenge, string) error); ok {
		r0 = rf(senderPk, challenge, channelPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveChallenge provides a mock function with given fields: challenge
func (_m *Repository) RemoveChallenge(challenge mfederation.FederationChallenge) error {
	ret := _m.Called(challenge)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChallenge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(mfederation.FederationChallenge) error); ok {
		r0 = rf(challenge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreMessageAndData provides a mock function with given fields: channelID, msg
func (_m *Repository) StoreMessageAndData(channelID string, msg message.Message) error {
	ret := _m.Called(channelID, msg)

	if len(ret) == 0 {
		panic("no return value specified for StoreMessageAndData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, message.Message) error); ok {
		r0 = rf(channelID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
