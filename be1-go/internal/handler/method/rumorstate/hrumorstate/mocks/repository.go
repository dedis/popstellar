// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mrumor "popstellar/internal/handler/method/rumor/mrumor"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAllRumorParams provides a mock function with given fields:
func (_m *Repository) GetAllRumorParams() ([]mrumor.ParamsRumor, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllRumorParams")
	}

	var r0 []mrumor.ParamsRumor
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]mrumor.ParamsRumor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []mrumor.ParamsRumor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mrumor.ParamsRumor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRumorTimestamp provides a mock function with given fields:
func (_m *Repository) GetRumorTimestamp() (mrumor.RumorTimestamp, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRumorTimestamp")
	}

	var r0 mrumor.RumorTimestamp
	var r1 error
	if rf, ok := ret.Get(0).(func() (mrumor.RumorTimestamp, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mrumor.RumorTimestamp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mrumor.RumorTimestamp)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
