// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	socket "popstellar/internal/network/socket"
)

// MethodHandler is an autogenerated mock type for the MethodHandler type
type MethodHandler struct {
	mock.Mock
}

// Handle provides a mock function with given fields: _a0, msg
func (_m *MethodHandler) Handle(_a0 socket.Socket, msg []byte) (*int, error) {
	ret := _m.Called(_a0, msg)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(socket.Socket, []byte) (*int, error)); ok {
		return rf(_a0, msg)
	}
	if rf, ok := ret.Get(0).(func(socket.Socket, []byte) *int); ok {
		r0 = rf(_a0, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(socket.Socket, []byte) error); ok {
		r1 = rf(_a0, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMethodHandler creates a new instance of MethodHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMethodHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MethodHandler {
	mock := &MethodHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
