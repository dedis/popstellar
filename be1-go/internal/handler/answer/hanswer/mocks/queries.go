// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mrumor "popstellar/internal/handler/method/rumor/mrumor"

	mock "github.com/stretchr/testify/mock"
)

// Queries is an autogenerated mock type for the Queries type
type Queries struct {
	mock.Mock
}

// GetRumor provides a mock function with given fields: queryID
func (_m *Queries) GetRumor(queryID int) (mrumor.Rumor, bool) {
	ret := _m.Called(queryID)

	if len(ret) == 0 {
		panic("no return value specified for GetRumor")
	}

	var r0 mrumor.Rumor
	var r1 bool
	if rf, ok := ret.Get(0).(func(int) (mrumor.Rumor, bool)); ok {
		return rf(queryID)
	}
	if rf, ok := ret.Get(0).(func(int) mrumor.Rumor); ok {
		r0 = rf(queryID)
	} else {
		r0 = ret.Get(0).(mrumor.Rumor)
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(queryID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// IsGetMessagesByID provides a mock function with given fields: id
func (_m *Queries) IsGetMessagesByID(id int) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsGetMessagesByID")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsRumor provides a mock function with given fields: id
func (_m *Queries) IsRumor(id int) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsRumor")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsRumorState provides a mock function with given fields: id
func (_m *Queries) IsRumorState(id int) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsRumorState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Remove provides a mock function with given fields: id
func (_m *Queries) Remove(id int) {
	_m.Called(id)
}

// NewQueries creates a new instance of Queries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queries {
	mock := &Queries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
