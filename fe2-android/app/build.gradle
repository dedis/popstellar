apply plugin: 'com.android.application'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.github.dedis.popstellar"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.github.dedis.popstellar.HiltTestRunner"

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        testOptions {
            unitTests.returnDefaultValues = true
            // Improve tests performances by disabling fancy animations
            animationsDisabled = true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {
            getIsDefault().set(true)  // sets this build type as default
            testCoverageEnabled true // Enables test coverage
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Enable data binding library for the project
    // For more information : https://developer.android.com/topic/libraries/data-binding
    dataBinding {
        enabled = true
    }

    flavorDimensions "default"

    productFlavors {
        mock {
            dimension "default"

            testOptions {
                execution 'ANDROIDX_TEST_ORCHESTRATOR'
            }

            // The following argument makes the Android Test Orchestrator run its
            // "pm clear" command after each test invocation. This command ensures
            // that the app's state is completely cleared between tests.
            testInstrumentationRunnerArguments clearPackageData: 'true'
        }

        // Flavor used only to compute the coverage of the tests as it cannot be done with
        // the android orchestrator enabled. More informations :
        // https://developer.android.com/training/testing/junit-runner#using-android-test-orchestrator
        cov {
            dimension "default"
        }

        prod {
            getIsDefault().set(true)  // sets this flavor as default
            dimension "default"
        }
    }

    // Make sure the coverage flavor uses the same source set as the mock
    sourceSets {
        cov {
            java.srcDirs += mock.java.srcDirs
            resources.srcDirs += mock.resources.srcDirs
        }
    }

    jacoco {
        jacocoVersion = "0.8.7"
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "dedis_student_21_pop_fe2"
        property "sonar.projectName", "PoP - Fe2-Android"
        property "sonar.organization", "dedis"
        property "sonar.host.url", "https://sonarcloud.io"
        // Comma-separated paths to the various directories containing the *.xml JUnit report files. Each path may be absolute or relative to the project base directory.
        property "sonar.junit.reportPaths", "${project.buildDir}/test-results/testMockDebugUnitTest/,${project.buildDir}/outputs/androidTest-results/connected/flavors/mock/"
        // Paths to xml files with Android Lint issues. If the main flavor is changed, this file will have to be changed too.
        property "sonar.androidLint.reportPaths", "${project.buildDir}/reports/lint-results-prodDebug.xml"
        // Paths to JaCoCo XML coverage report files.
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

project.gradle.taskGraph.whenReady {
    connectedCovDebugAndroidTest {
        ignoreFailures = true
    }
}

dependencies {
    implementation 'com.google.android.material:material:1.4.0'

    // Hilt dependencies
    def hilt_version = "2.38.1"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    annotationProcessor "com.google.dagger:hilt-compiler:$hilt_version"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.lifecycle:lifecycle-reactivestreams:2.4.0"
    implementation "androidx.security:security-crypto:1.1.0-alpha03"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'com.github.kenglxn.QRGen:android:2.6.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.crypto.tink:tink-android:1.5.0'
    implementation 'com.networknt:json-schema-validator:1.0.64'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.tinder.scarlet:scarlet:0.1.11'
    implementation 'com.tinder.scarlet:message-adapter-gson:0.1.11'
    implementation 'com.tinder.scarlet:stream-adapter-rxjava2:0.1.11'
    implementation 'com.tinder.scarlet:websocket-okhttp:0.1.11'
    implementation 'com.tinder.scarlet:lifecycle-android:0.1.11'
    implementation 'javax.websocket:javax.websocket-api:1.1'
    implementation 'me.relex:circleindicator:2.1.6'
    implementation 'org.glassfish.tyrus:tyrus-client:1.1'
    implementation 'org.glassfish.tyrus:tyrus-container-grizzly:1.1'

    def room_version = "2.4.0-beta01"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'

    implementation 'net.i2p.crypto:eddsa:0.3.0'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.65'
    implementation 'io.github.novacrypto:BIP39:2019.01.27'

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'net.jodah:concurrentunit:0.4.6'
    testImplementation 'org.glassfish.tyrus:tyrus-server:1.1'

    testImplementation 'org.slf4j:slf4j-api:1.7.30'
    testImplementation 'org.slf4j:slf4j-simple:1.7.30'

    testImplementation 'org.mockito:mockito-core:3.9.0'

    debugImplementation "androidx.fragment:fragment-testing:1.4.0"

    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'net.jodah:concurrentunit:0.4.6'
    androidTestImplementation 'org.glassfish.tyrus:tyrus-server:1.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'org.mockito:mockito-android:3.9.0'
    // Hilt dependencies
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    androidTestAnnotationProcessor "com.google.dagger:hilt-android-compiler:$hilt_version"

    androidTestUtil 'androidx.test:orchestrator:1.4.0'
}

copy {
    from '../../protocol'
    into 'src/main/resources/protocol'
    include 'answer/**'
    include 'examples/**'
    include 'query/**'
    include 'jsonRPC.json'

    // Replace the remote part of the base URL ($id) to the local resource path
    filter {
    String line -> line.replaceAll("https://raw\\.githubusercontent\\.com/dedis/[a-zA-Z0-9_-]+/master/", "resource:/")
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testCovDebugUnitTest', 'createCovDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'androidx/**/*.*',
        // Exclude Hilt generated classes
        '*_*Factory.class',
        '*_ComponentTreeDeps.class',
        '*_Factory.class',
        '*_GeneratedInjector.class',
        '*_HiltComponents.class',
        '*_HiltModules.class',
        '*_HiltModules_BindsModule.class',
        '*_HiltModules_KeyModule.class',
        '*_MembersInjector.class',
        '*_ProvideFactory.class',
        '*_SingletonC.class',
        '*_TestComponentDataSupplier.class',
        'BR.class',
        'BuildConfig.class',
        'DataBinderMapperImpl.class',
        'Hilt_*.class',
        '_test_*.class'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/covDebug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
        'jacoco/*.exec',
        'outputs/code_coverage/covDebugAndroidTest/connected/**/*.ec',
    ]))
}
