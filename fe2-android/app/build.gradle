apply plugin: 'com.android.application'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.adarshr.test-logger'

android {
    compileSdkVersion 33

    defaultConfig {
        applicationId "com.github.dedis.popstellar"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.github.dedis.popstellar.HiltTestRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        buildTypes {
            debug {
                isDefault true
                testCoverageEnabled true
            }

            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        javaCompileOptions {
            annotationProcessorOptions {
                // This argument is used by Room, the database library of the project.
                // It specifies the location where a schema of the database should be exported.
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // Enable data binding library for the project
        // For more information : https://developer.android.com/topic/libraries/data-binding
        buildFeatures {
            dataBinding true
        }

        // Enable the android test orchestrator to isolate the test from one another.
        testOptions {
            animationsDisabled true

            // Enables dexmaker to work which is necessary for mockito in android tests
            // https://github.com/mockk/mockk/issues/297#issuecomment-901924678
            packagingOptions {
                jniLibs {
                    useLegacyPackaging true
                }
            }

            unitTests {
                returnDefaultValues true
                includeAndroidResources true
            }

            unitTests.all {
                // Print test logs in a readable and clear way using
                // https://github.com/radarsh/gradle-test-logger-plugin
                testlogger {
                    showFullStackTraces true
                    showStandardStreams true
                    slowThreshold 4000
                }
            }
        }
    }

    sourceSets {
        // Define the project's file layout. For more information, please read the related documentation
        //
        // But, if you need to know the exact behavior, here it is :
        // The idea is that we use a modified debug sourceset to hold the shared sources between the tests.
        // This means that the debug version of the app will hold the test sources.
        //
        // Then, the test and androidTest sourcesets are relocated inside the test framework directory and
        // we add their suites directory to the sets
        debug {
            setRoot("src/test/framework/common")
        }

        testDebug {
            setRoot('src/test/framework/robolectric')
            java.srcDirs += 'src/test/ui/robolectric'
            // Basic unit tests
            java.srcDirs += 'src/test/unit/java'
            resources.srcDirs += 'src/test/unit/res'
        }

        androidTestDebug {
            setRoot('src/test/framework/emulator')
            java.srcDirs += 'src/test/ui/emulator'
        }

        // Remove usual test and androidTest source sets
        test {
            java.srcDirs = []
            resources.srcDirs = []
        }

        androidTest {
            java.srcDirs = []
            resources.srcDirs = []
        }
    }
}

// Disable every task related to release unit tests
project.afterEvaluate {
    tasks.findAll {
        var task = it.name.toLowerCase()
        return task.contains("release") && task.contains("unit")
    }.forEach {
        it.enabled = false
    }
}

// Sonarqube configuration - used to produce the analysis for SonarCloud
sonarqube {
    properties {
        property "sonar.projectKey", "dedis_popstellar_fe2"
        property "sonar.projectName", "PoP - Fe2-Android"
        property "sonar.organization", "dedis"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/"
        property "sonar.tests", "src/test/"
        // Comma-separated paths to the various directories containing the *.xml JUnit report files. Each path may be absolute or relative to the project base directory.
        property "sonar.junit.reportPaths", "${project.buildDir}/test-results/testDebugUnitTest/"
        // Paths to xml files with Android Lint issues. If the main flavor is changed, this file will have to be changed too.
        property "sonar.androidLint.reportPaths", "${project.buildDir}/reports/lint-results-debug.xml"
        // Paths to JaCoCo XML coverage report files.
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

delete 'src/main/resources/protocol'

copy {
    from '../../protocol'
    into 'src/main/resources/protocol'

    include 'answer/**'
    include 'examples/**'
    include 'qrcode/**'
    include 'query/**'
    include 'jsonRPC.json'

    // Replace the remote part of the base URL ($id) to the local resource path
    // This modification is done to force the use of local files when loading json sub-schemas ($ref)
    // https://json-schema.org/understanding-json-schema/structuring.html#base-uri

    filteringCharset = 'UTF-8'
    filter {
        String line -> line.replaceAll("https://raw\\.githubusercontent\\.com/dedis/[a-zA-Z0-9_-]+/master/", "resource:/")
    }
}

// Jacoco configuration - This configures jacoco for each test task
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['check']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BR.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'androidx/**/*.*',
        '**/databinding/*Binding*.class',
        // Exclude test framework from the coverage
        'com/github/dedis/popstellar/testutils/**',
        // Exclude Hilt generated classes
        'com/github/dedis/popstellar/DataBind*',
        '**/*Hilt*.*',
        'hilt_aggregated_deps/**',
        '**/*_Factory**',
        '**/*_MembersInjector.class',
        'dagger/**',
        '**/*_ComponentTreeDeps.class',
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/asm_instrumented_project_classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
        'outputs/unit_test_code_coverage/*/*.exec',
        'outputs/code_coverage/*/connected/**/*.ec',
    ]))
}

dependencies {
    // ============= Android Layout =============
    implementation 'com.google.android.material:material:1.6.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'me.relex:circleindicator:2.1.6'
    implementation 'com.takisoft.fix:preference-v7:27.0.0.0'

    // ================ Rx Java =================
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    // Converts Rx java to Livedata
    implementation "androidx.lifecycle:lifecycle-reactivestreams:2.5.1"

    // ================= Hilt ===================
    implementation "com.google.dagger:hilt-android:$hilt_version"
    annotationProcessor "com.google.dagger:hilt-compiler:$hilt_version"
    // Hilt for Robolectric tests
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    testAnnotationProcessor "com.google.dagger:hilt-android-compiler:$hilt_version"
    // Hilt for instrumented tests
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    androidTestAnnotationProcessor "com.google.dagger:hilt-android-compiler:$hilt_version"

    // =========== Various Security =============
    implementation 'io.github.novacrypto:BIP39:2019.01.27'
    implementation 'com.google.crypto.tink:tink-android:1.7.0'
    implementation 'ch.epfl.dedis:cothority:3.3.1'

    // ================= Json ==================
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.networknt:json-schema-validator:1.0.72'

    // ================ QRCode =================
    def camerax_version = "1.2.1"

    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.github.kenglxn.QRGen:android:2.6.0'
    implementation 'com.google.mlkit:barcode-scanning:17.0.3'
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"

    // going with the latest version makes the build fail for some reason (could not find why)
    // (Johann Pl√ºss, 08.02.2023)
    implementation 'androidx.camera:camera-mlkit-vision:1.2.0-beta02'

    // =============== WebSocket ===============
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    implementation "com.tinder.scarlet:scarlet:$scarlet_version"
    implementation "com.tinder.scarlet:message-adapter-gson:$scarlet_version"
    implementation "com.tinder.scarlet:stream-adapter-rxjava2:$scarlet_version"
    implementation "com.tinder.scarlet:websocket-okhttp:$scarlet_version"
    implementation "com.tinder.scarlet:lifecycle-android:$scarlet_version"

    // ============== Persistence ==============
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // ================= Log4j ====================
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.20.0'

    // ================= Pretty Time =================
    implementation 'org.ocpsoft.prettytime:prettytime:5.0.4.Final'

    // ============= Test Framework ============
    debugImplementation 'junit:junit:4.13.2'
    // Android framework
    debugImplementation "androidx.fragment:fragment-testing:1.5.2"
    debugImplementation 'android.arch.core:core-testing:1.1.1'
    debugImplementation 'androidx.test:core:1.4.0'
    debugImplementation 'androidx.test:runner:1.4.0'
    debugImplementation 'androidx.test:rules:1.4.0'
    debugImplementation 'androidx.test.ext:junit:1.1.3'
    debugImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    debugImplementation "com.android.support.test.espresso:espresso-contrib:$espresso_version"
    debugImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    // Robolectric
    testImplementation 'org.robolectric:robolectric:4.8'
    // Mockito
    debugImplementation 'org.mockito:mockito-core:4.6.1'
    // We use a special version of mockito that has the capability to mock final classes in android tests
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito-inline:2.28.1'
}
