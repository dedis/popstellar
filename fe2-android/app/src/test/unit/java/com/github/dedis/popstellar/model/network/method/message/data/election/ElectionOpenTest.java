package com.github.dedis.popstellar.model.network.method.message.data.election;

import androidx.test.ext.junit.runners.AndroidJUnit4;

import com.github.dedis.popstellar.model.network.JsonTestUtils;
import com.github.dedis.popstellar.model.objects.Election;
import com.github.dedis.popstellar.model.objects.Lao;
import com.github.dedis.popstellar.model.objects.security.PublicKey;
import com.github.dedis.popstellar.testutils.Base64DataUtils;
import com.google.gson.JsonParseException;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.time.Instant;

import static org.junit.Assert.*;

@RunWith(AndroidJUnit4.class)
public class ElectionOpenTest {

  // Hardcoded strings for election
  private static final PublicKey ORGANIZER = Base64DataUtils.generatePublicKey();
  private static final long CREATION = Instant.now().getEpochSecond();
  private static final String NAME = "Lao name";
  private static final long OPENED_AT = CREATION;
  private static final String LAO_ID = Lao.generateLaoId(ORGANIZER, CREATION, NAME);
  private static final String ELECTION_ID =
      Election.generateElectionSetupId(LAO_ID, CREATION, NAME);
  private static final ElectionOpen ELECTION_OPEN =
      new ElectionOpen(LAO_ID, ELECTION_ID, OPENED_AT);

  @Test
  public void getLaoIdTest() {
    assertEquals(LAO_ID, ELECTION_OPEN.laoId);
  }

  @Test
  public void getElectionIdTest() {
    assertEquals(ELECTION_ID, ELECTION_OPEN.electionId);
  }

  @Test
  public void getOpenedAtTest() {
    assertEquals(OPENED_AT, ELECTION_OPEN.openedAt);
  }

  @Test(expected = IllegalArgumentException.class)
  public void constructorFailsLaoIdNotBase64Test() {
    new ElectionOpen("not base 64", ELECTION_ID, OPENED_AT);
  }

  @Test(expected = IllegalArgumentException.class)
  public void constructorFailsElectionIdNotBase64Test() {
    new ElectionOpen(ELECTION_ID, "not base 64", OPENED_AT);
  }

  @Test(expected = IllegalArgumentException.class)
  public void constructorFailsOpenedTimeTooOld() {
    new ElectionOpen(LAO_ID, ELECTION_ID, 1);
  }

  @Test(expected = IllegalArgumentException.class)
  public void constructorFailsOpenedTimeInFuture() {
    new ElectionOpen(LAO_ID, ELECTION_ID, CREATION + 1000);
  }

  @Test
  public void equalsTest() {
    ElectionOpen electionOpen2 = new ElectionOpen(LAO_ID, ELECTION_ID, OPENED_AT);
    assertEquals(ELECTION_OPEN, electionOpen2);
    assertEquals(ELECTION_OPEN, ELECTION_OPEN);
    assertEquals(ELECTION_OPEN.hashCode(), electionOpen2.hashCode());

    String random = Lao.generateLaoId(ORGANIZER, CREATION + 1, NAME);
    assertNotEquals(ELECTION_OPEN, new ElectionOpen(random, ELECTION_ID, OPENED_AT));
    assertNotEquals(ELECTION_OPEN, new ElectionOpen(LAO_ID, random, OPENED_AT));
    assertNotEquals(ELECTION_OPEN, new ElectionOpen(LAO_ID, ELECTION_ID, CREATION - 1));
    assertNotEquals(ELECTION_OPEN, null);
  }

  @Test
  public void toStringTest() {
    assertEquals(
        "ElectionOpen{lao='"
            + LAO_ID
            + "', election='"
            + ELECTION_ID
            + "', opened_at="
            + CREATION
            + "}",
        ELECTION_OPEN.toString());
  }

  @Test
  public void jsonValidationTest() {
    JsonTestUtils.testData(ELECTION_OPEN);

    String pathDir = "protocol/examples/messageData/election_open/";
    String jsonValid1 = JsonTestUtils.loadFile(pathDir + "election_open.json");
    JsonTestUtils.parse(jsonValid1);

    String jsonInvalid1 =
        JsonTestUtils.loadFile(pathDir + "bad_election_open_opened_at_negative.json");

    assertThrows(JsonParseException.class, () -> JsonTestUtils.parse(jsonInvalid1));
  }
}
