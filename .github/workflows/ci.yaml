name: PoP CI

on:
  push:
    branches:
      - master

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  fe1-web:
    name: Fe1-Web
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        node-version: [16.x, 18.x]

    defaults:
      run:
        working-directory: ./fe1-web

    steps:
      - name: Setup repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of Sonar analysis

      - name: Setup node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup expo action
        uses: expo/expo-github-action@v5
        with:
          expo-version: 4.x

      - name: Setup node cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Setup npm dependencies
        run: |
          npm install --legacy-peer-deps

      - name: Check npm security issues
        run: npm audit fix
        continue-on-error: true

      - name: Run lint
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.node-version == '16.x' }} # execute even if previous steps failed
        run: npm run eslint

      - name: Validate dependencies
        if: ${{ always() }} # execute even if previous steps failed
        run: npm run depcruise

      - name: Run tsdoc
        if: ${{ always() }} # execute even if previous steps failed
        run: npm run docs

      - name: Run test
        if: ${{ always() }} # execute even if previous steps failed
        run: npm run test

      - name: Run code analysis
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.node-version == '16.x' }} # execute even if previous steps failed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN_FE1 }}

      - name: Verify expo project health
        if: ${{ always() }} # execute even if previous steps failed
        run: |
          expo doctor

      - name: Build expo web project
        run: |
          expo build:web

  be1-go:
    name: Be1-Go
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest]
    runs-on: ${{matrix.platform}}

    defaults:
      run:
        working-directory: ./be1-go

    steps:
      - name: Use go >= 1.19  
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.19'

      - name: Setup repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of Sonar analysis

      - uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Format
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: |
          make check-fmt
          if [ "$(gofmt -s -l ./ | wc -l)" -gt 0 ]; then exit 1; fi

      - name: Run check target
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: |
          make check

      - name: Run test target
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          make test

      - name: Run go vet
        run: |
          make vet

      - name: Build
        if: ${{ always() }} # execute even if previous steps failed
        run: |
          make build

      - name: Run code analysis
        if: ${{ matrix.platform == 'ubuntu-latest' }} # execute even if previous steps failed
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: be1-go
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BE1 }}

  fe2-android:
    name: Fe2-Android
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./fe2-android

    # This CI pipeline is greatly inspired by the sample given by https://github.com/ReactiveCircus/android-emulator-runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of Sonar analysis

      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: |
          chmod +x ./gradlew

      - name: Build App and Run Tests
        shell: bash
        run: |
          # use grep to remove log spam due to jetifier transformation, c.f. https://stackoverflow.com/a/52353446
          # use set -o pipefail to keep error code from gradle, c.f. https://stackoverflow.com/a/37128767
          ( set -o pipefail; ./gradlew build --parallel --build-cache --info | grep -vE "^Transforming (.*) with (.*)Transform" )

      - name: Generate Coverage Report
        shell: bash
        run: |
          # use grep to remove log spam due to jetifier transformation, c.f. https://stackoverflow.com/a/52353446
          # use set -o pipefail to keep error code from gradle, c.f. https://stackoverflow.com/a/37128767
          ( set -o pipefail; ./gradlew jacocoTestReport --parallel --build-cache --info | grep -vE "^Transforming (.*) with (.*)Transform" )

      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FE2 }}
        run: |
          # use grep to remove log spam due to jetifier transformation, c.f. https://stackoverflow.com/a/52353446
          # use set -o pipefail to keep error code from gradle, c.f. https://stackoverflow.com/a/37128767
          ( set -o pipefail; ./gradlew sonarqube --parallel --build-cache --info | grep -vE "^Transforming (.*) with (.*)Transform" )

  be2-scala:
    name: Be2-Scala
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./be2-scala

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"

      - name: Setup repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of Sonar analysis

      - name: Check formatting
        run: sbt scalafmtCheckAll

      - name: Run unit tests
        run: sbt clean coverage test

      - name: Report coverage
        run: sbt coverageReport

      - name: Run static analysis (ScapeGoat)
        run: sbt scapegoat

      - name: Run Sonar scanner
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BE2 }}
        run: sbt sonarScan

  protocol:
    name: protocol examples test
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./protocol/test

    steps:
      - name: Setup repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of Sonar analysis

      - name: Setup node 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Setup node cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Setup npm dependencies
        run: |
          npm install

      - name: Check npm security issues
        run: |
          npm audit fix

      - name: Run test
        run: |
          npm run test
