// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OrganizerNavigation renders correctly 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "rgb(242, 242, 242)",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MockScreen
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          forwardedRef={[Function]}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          pointerEvents="box-none"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={1}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          style={
                            [
                              {
                                "flex": 1,
                              },
                              undefined,
                            ]
                          }
                        >
                          <View
                            style={
                              [
                                {
                                  "backgroundColor": "rgb(242, 242, 242)",
                                  "flex": 1,
                                },
                                undefined,
                              ]
                            }
                          >
                            <View
                              collapsable={false}
                              pointerEvents="box-none"
                              style={
                                {
                                  "zIndex": 1,
                                }
                              }
                            >
                              <View
                                accessibilityElementsHidden={false}
                                importantForAccessibility="auto"
                                onLayout={[Function]}
                                pointerEvents="box-none"
                                style={null}
                              >
                                <View
                                  collapsable={false}
                                  pointerEvents="box-none"
                                  style={
                                    {
                                      "backgroundColor": "#fff",
                                      "borderColor": "rgb(216, 216, 216)",
                                      "bottom": 0,
                                      "left": 0,
                                      "opacity": 1,
                                      "position": "absolute",
                                      "right": 0,
                                      "top": 0,
                                      "zIndex": 0,
                                    }
                                  }
                                >
                                  <View
                                    style={
                                      {
                                        "bottom": 12,
                                        "display": "flex",
                                        "flexDirection": "row",
                                        "justifyContent": "center",
                                        "left": 8,
                                        "position": "absolute",
                                        "right": 8,
                                      }
                                    }
                                  >
                                    <Text
                                      style={
                                        [
                                          {
                                            "fontSize": 8,
                                            "lineHeight": 1,
                                          },
                                          {
                                            "color": "#8E8E8E",
                                          },
                                          {
                                            "fontFamily": "Courier New",
                                          },
                                          {
                                            "textTransform": "uppercase",
                                          },
                                        ]
                                      }
                                    >
                                      <Text
                                        onPress={[Function]}
                                      />
                                      <Text>
                                         | 
                                      </Text>
                                      <Text
                                        onPress={[Function]}
                                      />
                                      <Text>
                                         | 
                                      </Text>
                                      <Text />
                                    </Text>
                                  </View>
                                </View>
                                <View
                                  collapsable={false}
                                  pointerEvents="box-none"
                                  style={
                                    {
                                      "height": 44,
                                      "maxHeight": undefined,
                                      "minHeight": undefined,
                                      "opacity": undefined,
                                      "transform": undefined,
                                    }
                                  }
                                >
                                  <View
                                    pointerEvents="none"
                                    style={
                                      {
                                        "height": 0,
                                      }
                                    }
                                  />
                                  <View
                                    pointerEvents="box-none"
                                    style={
                                      {
                                        "alignItems": "stretch",
                                        "flex": 1,
                                        "flexDirection": "row",
                                      }
                                    }
                                  >
                                    <View
                                      collapsable={false}
                                      pointerEvents="box-none"
                                      style={
                                        {
                                          "alignItems": "flex-start",
                                          "flexBasis": "auto",
                                          "flexGrow": 1,
                                          "justifyContent": "center",
                                          "marginStart": 0,
                                          "opacity": 1,
                                          "paddingLeft": 16,
                                        }
                                      }
                                    >
                                      <View
                                        style={
                                          {
                                            "alignItems": "center",
                                            "display": "flex",
                                            "flexDirection": "row",
                                          }
                                        }
                                      >
                                        <View
                                          accessible={true}
                                          collapsable={false}
                                          focusable={false}
                                          onClick={[Function]}
                                          onResponderGrant={[Function]}
                                          onResponderMove={[Function]}
                                          onResponderRelease={[Function]}
                                          onResponderTerminate={[Function]}
                                          onResponderTerminationRequest={[Function]}
                                          onStartShouldSetResponder={[Function]}
                                          style={
                                            {
                                              "opacity": 1,
                                            }
                                          }
                                          testID="drawer_menu_button"
                                        >
                                          <View>
                                            {"name":"ios-menu","size":25,"color":"#8E8E8E"}
                                          </View>
                                        </View>
                                      </View>
                                    </View>
                                    <View
                                      collapsable={false}
                                      pointerEvents="box-none"
                                      style={
                                        {
                                          "flexShrink": 1,
                                          "justifyContent": "center",
                                          "marginHorizontal": 16,
                                          "maxWidth": 590,
                                          "opacity": 1,
                                        }
                                      }
                                    >
                                      <Text
                                        accessibilityRole="header"
                                        aria-level="1"
                                        collapsable={false}
                                        numberOfLines={1}
                                        onLayout={[Function]}
                                        style={
                                          {
                                            "color": "#000",
                                            "fontSize": 20,
                                            "fontWeight": "500",
                                            "lineHeight": 26,
                                            "textAlign": "left",
                                          }
                                        }
                                      >
                                        Events
                                      </Text>
                                    </View>
                                    <View
                                      collapsable={false}
                                      pointerEvents="box-none"
                                      style={
                                        {
                                          "alignItems": "flex-end",
                                          "flexBasis": "auto",
                                          "flexGrow": 1,
                                          "justifyContent": "center",
                                          "marginEnd": 0,
                                          "opacity": 1,
                                          "paddingRight": 16,
                                        }
                                      }
                                    >
                                      <View
                                        style={
                                          {
                                            "alignItems": "center",
                                            "flex": 1,
                                            "flexDirection": "row",
                                          }
                                        }
                                      >
                                        <View
                                          style={
                                            {
                                              "marginLeft": 16,
                                            }
                                          }
                                        />
                                      </View>
                                    </View>
                                  </View>
                                </View>
                              </View>
                            </View>
                            <RNSScreenContainer
                              onLayout={[Function]}
                              style={
                                {
                                  "flex": 1,
                                }
                              }
                            >
                              <RNSScreen
                                activityState={2}
                                collapsable={false}
                                forwardedRef={[Function]}
                                gestureResponseDistance={
                                  {
                                    "bottom": -1,
                                    "end": -1,
                                    "start": -1,
                                    "top": -1,
                                  }
                                }
                                pointerEvents="box-none"
                                style={
                                  {
                                    "bottom": 0,
                                    "left": 0,
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  }
                                }
                              >
                                <View
                                  collapsable={false}
                                  style={
                                    {
                                      "opacity": 1,
                                    }
                                  }
                                />
                                <View
                                  accessibilityElementsHidden={false}
                                  closing={false}
                                  gestureVelocityImpact={0.3}
                                  importantForAccessibility="auto"
                                  onClose={[Function]}
                                  onGestureBegin={[Function]}
                                  onGestureCanceled={[Function]}
                                  onGestureEnd={[Function]}
                                  onOpen={[Function]}
                                  onTransition={[Function]}
                                  pointerEvents="box-none"
                                  style={
                                    [
                                      {
                                        "display": "flex",
                                        "overflow": undefined,
                                      },
                                      {
                                        "bottom": 0,
                                        "left": 0,
                                        "position": "absolute",
                                        "right": 0,
                                        "top": 0,
                                      },
                                    ]
                                  }
                                  transitionSpec={
                                    {
                                      "close": {
                                        "animation": "spring",
                                        "config": {
                                          "damping": 500,
                                          "mass": 3,
                                          "overshootClamping": true,
                                          "restDisplacementThreshold": 10,
                                          "restSpeedThreshold": 10,
                                          "stiffness": 1000,
                                        },
                                      },
                                      "open": {
                                        "animation": "spring",
                                        "config": {
                                          "damping": 500,
                                          "mass": 3,
                                          "overshootClamping": true,
                                          "restDisplacementThreshold": 10,
                                          "restSpeedThreshold": 10,
                                          "stiffness": 1000,
                                        },
                                      },
                                    }
                                  }
                                >
                                  <View
                                    collapsable={false}
                                    pointerEvents="box-none"
                                    style={
                                      {
                                        "flex": 1,
                                      }
                                    }
                                  >
                                    <View
                                      collapsable={false}
                                      forwardedRef={[Function]}
                                      handlerTag={2}
                                      handlerType="PanGestureHandler"
                                      needsOffscreenAlphaCompositing={false}
                                      onGestureHandlerEvent={[Function]}
                                      onGestureHandlerStateChange={[Function]}
                                      style={
                                        {
                                          "flex": 1,
                                          "transform": [
                                            {
                                              "translateX": 0,
                                            },
                                            {
                                              "translateX": 0,
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <View
                                        pointerEvents="box-none"
                                        style={
                                          [
                                            {
                                              "flex": 1,
                                              "overflow": "hidden",
                                            },
                                            [
                                              {
                                                "backgroundColor": "rgb(242, 242, 242)",
                                              },
                                              {
                                                "flex": 1,
                                              },
                                            ],
                                          ]
                                        }
                                      >
                                        <View
                                          style={
                                            {
                                              "flex": 1,
                                              "flexDirection": "column-reverse",
                                            }
                                          }
                                        >
                                          <View
                                            style={
                                              {
                                                "flex": 1,
                                              }
                                            }
                                          >
                                            <View
                                              style={
                                                {
                                                  "flex": 1,
                                                }
                                              }
                                            >
                                              <RCTScrollView
                                                collapsable={false}
                                                handlerTag={3}
                                                handlerType="NativeViewGestureHandler"
                                                onGestureHandlerEvent={[Function]}
                                                onGestureHandlerStateChange={[Function]}
                                                style={
                                                  {
                                                    "padding": 16,
                                                  }
                                                }
                                                waitFor={
                                                  [
                                                    {
                                                      "current": null,
                                                    },
                                                  ]
                                                }
                                              >
                                                <View />
                                              </RCTScrollView>
                                            </View>
                                          </View>
                                        </View>
                                      </View>
                                    </View>
                                  </View>
                                </View>
                              </RNSScreen>
                            </RNSScreenContainer>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;
