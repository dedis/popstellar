// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EventElection Finished election where the results are available renders correctly for an attendee 1`] = `
Array [
  <View>
    <Text
      style={
        Object {
          "marginHorizontal": 10,
        }
      }
    >
      Start: 
      <time
        dateTime="2020-12-31T23:00:00.000Z"
        title="2020-12-31 23:00"
      >
        1 year ago
      </time>
      

      End: 
      <time
        dateTime="2021-01-01T23:00:00.000Z"
        title="2021-01-01 23:00"
      >
        1 year ago
      </time>
    </Text>
  </View>,
  <Text
    style={
      Object {
        "fontSize": 25,
        "marginHorizontal": 10,
        "textAlign": "center",
      }
    }
  >
    Election Result
  </Text>,
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "flex-start",
        "padding": 10,
      }
    }
  >
    <View
      style={Object {}}
    >
      <RNSVGSvgView
        bbHeight={260}
        bbWidth={460}
        focusable={false}
        height={260}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            Object {
              "flex": 0,
              "height": 260,
              "width": 460,
            },
          ]
        }
        width={460}
      >
        <RNSVGGroup>
          <RNSVGDefs>
            <RNSVGLinearGradient
              gradient={
                Array [
                  0,
                  1976611,
                  1,
                  1292374797,
                ]
              }
              gradientTransform={null}
              gradientUnits={1}
              name="backgroundGradient"
              x1={0}
              x2={460}
              y1={5000}
              y2={0}
            />
            <RNSVGLinearGradient
              gradient={
                Array [
                  0,
                  436207616,
                  1,
                  0,
                ]
              }
              gradientTransform={null}
              gradientUnits={1}
              name="fillShadowGradient"
              x1={0}
              x2={0}
              y1={0}
              y2={5000}
            />
          </RNSVGDefs>
          <RNSVGDefs />
          <RNSVGRect
            fill={
              Array [
                1,
                "backgroundGradient",
              ]
            }
            height={260}
            propList={
              Array [
                "fill",
              ]
            }
            rx={0}
            ry={0}
            width="100%"
            x={0}
            y={0}
          />
          <RNSVGGroup>
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={16}
              y2={16}
            />
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={64.75}
              y2={64.75}
            />
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={113.5}
              y2={113.5}
            />
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={162.25}
              y2={162.25}
            />
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={211}
              y2={211}
            />
          </RNSVGGroup>
          <RNSVGGroup>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  211,
                ]
              }
            >
              <RNSVGTSpan
                content="3"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  162.25,
                ]
              }
            >
              <RNSVGTSpan
                content="5"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  113.5,
                ]
              }
            >
              <RNSVGTSpan
                content="7"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  64.75,
                ]
              }
            >
              <RNSVGTSpan
                content="8"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  16,
                ]
              }
            >
              <RNSVGTSpan
                content="10"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
          </RNSVGGroup>
          <RNSVGGroup>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "middle",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  96,
                ]
              }
              y={
                Array [
                  235,
                ]
              }
            >
              <RNSVGTSpan
                content="Ballot Option 1"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "middle",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  294,
                ]
              }
              y={
                Array [
                  235,
                ]
              }
            >
              <RNSVGTSpan
                content="Ballot Option 2"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
          </RNSVGGroup>
          <RNSVGGroup>
            <RNSVGRect
              fill={
                Array [
                  1,
                  "fillShadowGradient",
                ]
              }
              height={195}
              propList={
                Array [
                  "fill",
                ]
              }
              rx={0}
              width={32}
              x={80}
              y={16}
            />
            <RNSVGRect
              fill={
                Array [
                  1,
                  "fillShadowGradient",
                ]
              }
              height={0}
              propList={
                Array [
                  "fill",
                ]
              }
              rx={0}
              width={32}
              x={278}
              y={211}
            />
          </RNSVGGroup>
          <RNSVGGroup />
          <RNSVGGroup>
            <RNSVGRect
              fill={2566914048}
              height={2}
              propList={
                Array [
                  "fill",
                ]
              }
              width={32}
              x={80}
              y={16}
            />
            <RNSVGRect
              fill={2566914048}
              height={2}
              propList={
                Array [
                  "fill",
                ]
              }
              width={32}
              x={278}
              y={211}
            />
          </RNSVGGroup>
        </RNSVGGroup>
      </RNSVGSvgView>
    </View>
  </View>,
]
`;

exports[`EventElection Finished election where the results are available renders correctly for an organizer 1`] = `
Array [
  <View>
    <Text
      style={
        Object {
          "marginHorizontal": 10,
        }
      }
    >
      Start: 
      <time
        dateTime="2020-12-31T23:00:00.000Z"
        title="2020-12-31 23:00"
      >
        1 year ago
      </time>
      

      End: 
      <time
        dateTime="2021-01-01T23:00:00.000Z"
        title="2021-01-01 23:00"
      >
        1 year ago
      </time>
    </Text>
  </View>,
  <Text
    style={
      Object {
        "fontSize": 25,
        "marginHorizontal": 10,
        "textAlign": "center",
      }
    }
  >
    Election Result
  </Text>,
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "flex-start",
        "padding": 10,
      }
    }
  >
    <View
      style={Object {}}
    >
      <RNSVGSvgView
        bbHeight={260}
        bbWidth={460}
        focusable={false}
        height={260}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            Object {
              "flex": 0,
              "height": 260,
              "width": 460,
            },
          ]
        }
        width={460}
      >
        <RNSVGGroup>
          <RNSVGDefs>
            <RNSVGLinearGradient
              gradient={
                Array [
                  0,
                  1976611,
                  1,
                  1292374797,
                ]
              }
              gradientTransform={null}
              gradientUnits={1}
              name="backgroundGradient"
              x1={0}
              x2={460}
              y1={5000}
              y2={0}
            />
            <RNSVGLinearGradient
              gradient={
                Array [
                  0,
                  436207616,
                  1,
                  0,
                ]
              }
              gradientTransform={null}
              gradientUnits={1}
              name="fillShadowGradient"
              x1={0}
              x2={0}
              y1={0}
              y2={5000}
            />
          </RNSVGDefs>
          <RNSVGDefs />
          <RNSVGRect
            fill={
              Array [
                1,
                "backgroundGradient",
              ]
            }
            height={260}
            propList={
              Array [
                "fill",
              ]
            }
            rx={0}
            ry={0}
            width="100%"
            x={0}
            y={0}
          />
          <RNSVGGroup>
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={16}
              y2={16}
            />
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={64.75}
              y2={64.75}
            />
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={113.5}
              y2={113.5}
            />
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={162.25}
              y2={162.25}
            />
            <RNSVGLine
              propList={
                Array [
                  "stroke",
                  "strokeWidth",
                  "strokeDasharray",
                ]
              }
              stroke={855638016}
              strokeDasharray={
                Array [
                  "5",
                  "10",
                ]
              }
              strokeWidth={1}
              x1={0}
              x2={460}
              y1={211}
              y2={211}
            />
          </RNSVGGroup>
          <RNSVGGroup>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  211,
                ]
              }
            >
              <RNSVGTSpan
                content="3"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  162.25,
                ]
              }
            >
              <RNSVGTSpan
                content="5"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  113.5,
                ]
              }
            >
              <RNSVGTSpan
                content="7"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  64.75,
                ]
              }
            >
              <RNSVGTSpan
                content="8"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "end",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  52,
                ]
              }
              y={
                Array [
                  16,
                ]
              }
            >
              <RNSVGTSpan
                content="10"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
          </RNSVGGroup>
          <RNSVGGroup>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "middle",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  96,
                ]
              }
              y={
                Array [
                  235,
                ]
              }
            >
              <RNSVGTSpan
                content="Ballot Option 1"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
            <RNSVGText
              content={null}
              dx={Array []}
              dy={Array []}
              fill={3422552064}
              font={
                Object {
                  "fontSize": 12,
                  "textAnchor": "middle",
                }
              }
              matrix={
                Array [
                  1,
                  0,
                  -0,
                  1,
                  0,
                  0,
                ]
              }
              propList={
                Array [
                  "fill",
                ]
              }
              rotate={Array []}
              x={
                Array [
                  294,
                ]
              }
              y={
                Array [
                  235,
                ]
              }
            >
              <RNSVGTSpan
                content="Ballot Option 2"
                dx={Array []}
                dy={Array []}
                font={Object {}}
                rotate={Array []}
                x={Array []}
                y={Array []}
              />
            </RNSVGText>
          </RNSVGGroup>
          <RNSVGGroup>
            <RNSVGRect
              fill={
                Array [
                  1,
                  "fillShadowGradient",
                ]
              }
              height={195}
              propList={
                Array [
                  "fill",
                ]
              }
              rx={0}
              width={32}
              x={80}
              y={16}
            />
            <RNSVGRect
              fill={
                Array [
                  1,
                  "fillShadowGradient",
                ]
              }
              height={0}
              propList={
                Array [
                  "fill",
                ]
              }
              rx={0}
              width={32}
              x={278}
              y={211}
            />
          </RNSVGGroup>
          <RNSVGGroup />
          <RNSVGGroup>
            <RNSVGRect
              fill={2566914048}
              height={2}
              propList={
                Array [
                  "fill",
                ]
              }
              width={32}
              x={80}
              y={16}
            />
            <RNSVGRect
              fill={2566914048}
              height={2}
              propList={
                Array [
                  "fill",
                ]
              }
              width={32}
              x={278}
              y={211}
            />
          </RNSVGGroup>
        </RNSVGGroup>
      </RNSVGSvgView>
    </View>
  </View>,
]
`;

exports[`EventElection Not started election renders correctly for an attendee 1`] = `
Array [
  <View>
    <Text
      style={
        Object {
          "marginHorizontal": 10,
        }
      }
    >
      Start: 
      <time
        dateTime="2020-12-31T23:00:00.000Z"
        title="2020-12-31 23:00"
      >
        1 year ago
      </time>
      

      End: 
      <time
        dateTime="2021-01-01T23:00:00.000Z"
        title="2021-01-01 23:00"
      >
        1 year ago
      </time>
    </Text>
  </View>,
  <RCTScrollView
    data={
      Array [
        Object {
          "data": Array [
            "Ballot Option 1",
            "Ballot Option 2",
          ],
          "title": "Mock Question 1",
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={
      Array [
        0,
      ]
    }
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <Text
          style={
            Object {
              "fontSize": 20,
              "marginHorizontal": 10,
              "textAlign": "center",
            }
          }
        >
          Mock Question 1
        </Text>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <Text
          style={
            Object {
              "fontSize": 16,
              "marginHorizontal": 20,
              "textAlign": "center",
            }
          }
        >
          • Ballot Option 1
        </Text>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <Text
          style={
            Object {
              "fontSize": 16,
              "marginHorizontal": 20,
              "textAlign": "center",
            }
          }
        >
          • Ballot Option 2
        </Text>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      />
    </View>
  </RCTScrollView>,
]
`;

exports[`EventElection Not started election renders correctly for an organizer 1`] = `
Array [
  <View>
    <Text
      style={
        Object {
          "marginHorizontal": 10,
        }
      }
    >
      Start: 
      <time
        dateTime="2020-12-31T23:00:00.000Z"
        title="2020-12-31 23:00"
      >
        1 year ago
      </time>
      

      End: 
      <time
        dateTime="2021-01-01T23:00:00.000Z"
        title="2021-01-01 23:00"
      >
        1 year ago
      </time>
    </Text>
  </View>,
  <RCTScrollView
    data={
      Array [
        Object {
          "data": Array [
            "Ballot Option 1",
            "Ballot Option 2",
          ],
          "title": "Mock Question 1",
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={
      Array [
        0,
      ]
    }
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <Text
          style={
            Object {
              "fontSize": 20,
              "marginHorizontal": 10,
              "textAlign": "center",
            }
          }
        >
          Mock Question 1
        </Text>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <Text
          style={
            Object {
              "fontSize": 16,
              "marginHorizontal": 20,
              "textAlign": "center",
            }
          }
        >
          • Ballot Option 1
        </Text>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <Text
          style={
            Object {
              "fontSize": 16,
              "marginHorizontal": 20,
              "textAlign": "center",
            }
          }
        >
          • Ballot Option 2
        </Text>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      />
    </View>
  </RCTScrollView>,
  <View
    style={
      Object {
        "marginHorizontal": 50,
        "marginVertical": 10,
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          disabled={false}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Open election
        </Text>
      </View>
    </View>
  </View>,
  ",",
]
`;

exports[`EventElection Running election renders correctly for an attendee 1`] = `
Array [
  <View>
    <Text
      style={
        Object {
          "marginHorizontal": 10,
        }
      }
    >
      Start: 
      <time
        dateTime="2020-12-31T23:00:00.000Z"
        title="2020-12-31 23:00"
      >
        1 year ago
      </time>
      

      End: 
      <time
        dateTime="2021-01-01T23:00:00.000Z"
        title="2021-01-01 23:00"
      >
        1 year ago
      </time>
    </Text>
  </View>,
  <View
    style={
      Object {
        "alignContent": "center",
        "alignItems": "center",
        "flexDirection": "column",
        "justifyContent": "center",
        "zIndex": 3,
      }
    }
  >
    <Text
      style={
        Object {
          "fontSize": 25,
          "marginHorizontal": 10,
          "textAlign": "center",
        }
      }
    >
      Mock Question 1
    </Text>
    <View
      style={
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
          "zIndex": 3,
        }
      }
    >
      <View
        accessibilityRole="checkbox"
        accessibilityState={
          Object {
            "checked": false,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#fafafa",
            "borderColor": "#ededed",
            "borderRadius": 3,
            "borderWidth": 1,
            "margin": 5,
            "marginLeft": 10,
            "marginRight": 10,
            "opacity": 1,
            "padding": 10,
          }
        }
        testID="checkBoxBallot Option 1"
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            }
          }
        >
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "color": "#bfbfbf",
                  "fontSize": 24,
                },
                Object {
                  "minWidth": 24,
                },
                Object {
                  "fontFamily": "FontAwesome",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                Object {},
              ]
            }
          >
            
          </Text>
          <Text
            style={
              Object {
                "color": "#43484d",
                "fontWeight": "bold",
                "marginLeft": 10,
                "marginRight": 10,
              }
            }
            testID="checkboxTitle"
          >
            Ballot Option 1
          </Text>
        </View>
      </View>
      <View
        accessibilityRole="checkbox"
        accessibilityState={
          Object {
            "checked": false,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#fafafa",
            "borderColor": "#ededed",
            "borderRadius": 3,
            "borderWidth": 1,
            "margin": 5,
            "marginLeft": 10,
            "marginRight": 10,
            "opacity": 1,
            "padding": 10,
          }
        }
        testID="checkBoxBallot Option 2"
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            }
          }
        >
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "color": "#bfbfbf",
                  "fontSize": 24,
                },
                Object {
                  "minWidth": 24,
                },
                Object {
                  "fontFamily": "FontAwesome",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                Object {},
              ]
            }
          >
            
          </Text>
          <Text
            style={
              Object {
                "color": "#43484d",
                "fontWeight": "bold",
                "marginLeft": 10,
                "marginRight": 10,
              }
            }
            testID="checkboxTitle"
          >
            Ballot Option 2
          </Text>
        </View>
      </View>
    </View>
  </View>,
  <View
    style={
      Object {
        "marginHorizontal": 50,
        "marginVertical": 10,
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          disabled={false}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Cast Vote
        </Text>
      </View>
    </View>
  </View>,
  <View
    style={Object {}}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#52c41a",
          "borderColor": "#fff",
          "borderRadius": 9,
          "borderWidth": 0.5,
          "height": 18,
          "justifyContent": "center",
          "minWidth": 18,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "white",
            "fontSize": 12,
            "paddingHorizontal": 4,
          }
        }
      >
        0
      </Text>
    </View>
  </View>,
]
`;

exports[`EventElection Running election renders correctly for an organizer 1`] = `
Array [
  <View>
    <Text
      style={
        Object {
          "marginHorizontal": 10,
        }
      }
    >
      Start: 
      <time
        dateTime="2020-12-31T23:00:00.000Z"
        title="2020-12-31 23:00"
      >
        1 year ago
      </time>
      

      End: 
      <time
        dateTime="2021-01-01T23:00:00.000Z"
        title="2021-01-01 23:00"
      >
        1 year ago
      </time>
    </Text>
  </View>,
  <View
    style={
      Object {
        "alignContent": "center",
        "alignItems": "center",
        "flexDirection": "column",
        "justifyContent": "center",
        "zIndex": 3,
      }
    }
  >
    <Text
      style={
        Object {
          "fontSize": 25,
          "marginHorizontal": 10,
          "textAlign": "center",
        }
      }
    >
      Mock Question 1
    </Text>
    <View
      style={
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
          "zIndex": 3,
        }
      }
    >
      <View
        accessibilityRole="checkbox"
        accessibilityState={
          Object {
            "checked": false,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#fafafa",
            "borderColor": "#ededed",
            "borderRadius": 3,
            "borderWidth": 1,
            "margin": 5,
            "marginLeft": 10,
            "marginRight": 10,
            "opacity": 1,
            "padding": 10,
          }
        }
        testID="checkBoxBallot Option 1"
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            }
          }
        >
          <Text />
          <Text
            style={
              Object {
                "color": "#43484d",
                "fontWeight": "bold",
                "marginLeft": 10,
                "marginRight": 10,
              }
            }
            testID="checkboxTitle"
          >
            Ballot Option 1
          </Text>
        </View>
      </View>
      <View
        accessibilityRole="checkbox"
        accessibilityState={
          Object {
            "checked": false,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#fafafa",
            "borderColor": "#ededed",
            "borderRadius": 3,
            "borderWidth": 1,
            "margin": 5,
            "marginLeft": 10,
            "marginRight": 10,
            "opacity": 1,
            "padding": 10,
          }
        }
        testID="checkBoxBallot Option 2"
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            }
          }
        >
          <Text />
          <Text
            style={
              Object {
                "color": "#43484d",
                "fontWeight": "bold",
                "marginLeft": 10,
                "marginRight": 10,
              }
            }
            testID="checkboxTitle"
          >
            Ballot Option 2
          </Text>
        </View>
      </View>
    </View>
  </View>,
  <View
    style={
      Object {
        "marginHorizontal": 50,
        "marginVertical": 10,
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          disabled={false}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Cast Vote
        </Text>
      </View>
    </View>
  </View>,
  <View
    style={Object {}}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#52c41a",
          "borderColor": "#fff",
          "borderRadius": 9,
          "borderWidth": 0.5,
          "height": 18,
          "justifyContent": "center",
          "minWidth": 18,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "white",
            "fontSize": 12,
            "paddingHorizontal": 4,
          }
        }
      >
        0
      </Text>
    </View>
  </View>,
  <View
    style={
      Object {
        "marginHorizontal": 50,
        "marginVertical": 10,
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          disabled={false}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Terminate Election / Tally Votes
        </Text>
      </View>
    </View>
  </View>,
]
`;

exports[`EventElection Terminated election where the results are not yet available renders correctly for an attendee 1`] = `
Array [
  <View>
    <Text
      style={
        Object {
          "marginHorizontal": 10,
        }
      }
    >
      Start: 
      <time
        dateTime="2020-12-31T23:00:00.000Z"
        title="2020-12-31 23:00"
      >
        1 year ago
      </time>
      

      End: 
      <time
        dateTime="2021-01-01T23:00:00.000Z"
        title="2021-01-01 23:00"
      >
        1 year ago
      </time>
    </Text>
  </View>,
  <Text
    style={
      Object {
        "fontSize": 25,
        "marginHorizontal": 10,
        "textAlign": "center",
      }
    }
  >
    Election Terminated
  </Text>,
  <Text
    style={
      Object {
        "fontSize": 25,
        "marginHorizontal": 10,
        "textAlign": "center",
      }
    }
  >
    Waiting for result
  </Text>,
]
`;

exports[`EventElection Terminated election where the results are not yet available renders correctly for an organizer 1`] = `
Array [
  <View>
    <Text
      style={
        Object {
          "marginHorizontal": 10,
        }
      }
    >
      Start: 
      <time
        dateTime="2020-12-31T23:00:00.000Z"
        title="2020-12-31 23:00"
      >
        1 year ago
      </time>
      

      End: 
      <time
        dateTime="2021-01-01T23:00:00.000Z"
        title="2021-01-01 23:00"
      >
        1 year ago
      </time>
    </Text>
  </View>,
  <Text
    style={
      Object {
        "fontSize": 25,
        "marginHorizontal": 10,
        "textAlign": "center",
      }
    }
  >
    Election Terminated
  </Text>,
  <Text
    style={
      Object {
        "fontSize": 25,
        "marginHorizontal": 10,
        "textAlign": "center",
      }
    }
  >
    Waiting for result
  </Text>,
  ",",
]
`;

exports[`EventElection Undefined election status renders null for an attendee 1`] = `
<View>
  <Text
    style={
      Object {
        "marginHorizontal": 10,
      }
    }
  >
    Start: 
    <time
      dateTime="2020-12-31T23:00:00.000Z"
      title="2020-12-31 23:00"
    >
      1 year ago
    </time>
    

    End: 
    <time
      dateTime="2021-01-01T23:00:00.000Z"
      title="2021-01-01 23:00"
    >
      1 year ago
    </time>
  </Text>
</View>
`;

exports[`EventElection Undefined election status renders null for an organizer 1`] = `
<View>
  <Text
    style={
      Object {
        "marginHorizontal": 10,
      }
    }
  >
    Start: 
    <time
      dateTime="2020-12-31T23:00:00.000Z"
      title="2020-12-31 23:00"
    >
      1 year ago
    </time>
    

    End: 
    <time
      dateTime="2021-01-01T23:00:00.000Z"
      title="2021-01-01 23:00"
    >
      1 year ago
    </time>
  </Text>
</View>
`;
