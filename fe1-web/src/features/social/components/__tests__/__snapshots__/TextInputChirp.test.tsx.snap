// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextInputChirp renders correctly when writing less than 300 chars 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#fff",
      "borderColor": "#000",
      "borderRadius": 8,
      "flexDirection": "row",
      "padding": 16,
    }
  }
>
  <View
    style={
      Object {
        "marginRight": 16,
      }
    }
  >
    <blockies
      bgColor="#ffffff"
      scale={5}
      seed=""
      size={8}
      spotColor="#008ec2"
    />
  </View>
  <View
    style={
      Object {
        "display": "flex",
        "flexDirection": "column",
        "flexGrow": 1,
      }
    }
  >
    <TextInput
      multiline={true}
      numberOfLines={1}
      onBlur={[Function]}
      onChangeText={
        [MockFunction] {
          "calls": Array [
            Array [
              "Hello World !",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onFocus={[Function]}
      placeholder="Your chirp"
      placeholderTextColor="#8E8E8E"
      selectTextOnFocus={true}
      style={
        Array [
          Object {
            "color": "#000",
            "fontSize": 20,
            "lineHeight": 26,
            "textAlign": "left",
          },
          Object {
            "alignContent": "flex-end",
            "borderColor": "#000",
            "borderRadius": 8,
            "borderWidth": 1,
            "padding": 16,
          },
        ]
      }
      value=""
    />
    <View
      style={
        Object {
          "alignItems": "center",
          "alignSelf": "flex-end",
          "flexDirection": "row",
          "marginTop": 16,
        }
      }
    >
      <View
        style={
          Object {
            "marginRight": 16,
          }
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "textAlign": "left",
              },
            ]
          }
        >
          300
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={Object {}}
      >
        <RNGestureHandlerButton
          collapsable={false}
          exclusive={true}
          handlerTag={4}
          handlerType="NativeViewGestureHandler"
          onGestureEvent={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onHandlerStateChange={[Function]}
          rippleColor={0}
          touchSoundDisabled={false}
        >
          <View
            accessible={true}
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "backgroundColor": "#3742fa",
                    "borderColor": "#3742fa",
                    "borderRadius": 8,
                    "borderWidth": 1,
                    "padding": 8,
                  },
                  Object {
                    "backgroundColor": "#8E8E8E",
                    "borderColor": "#8E8E8E",
                  },
                ]
              }
            >
              <Text
                style={
                  Array [
                    Object {
                      "color": "#000",
                      "fontSize": 20,
                      "lineHeight": 26,
                      "textAlign": "left",
                    },
                    Object {
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#fff",
                    },
                  ]
                }
              >
                Publish
              </Text>
            </View>
          </View>
        </RNGestureHandlerButton>
      </View>
    </View>
  </View>
</View>
`;

exports[`TextInputChirp renders correctly when writing more than 300 chars 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#fff",
      "borderColor": "#000",
      "borderRadius": 8,
      "flexDirection": "row",
      "padding": 16,
    }
  }
>
  <View
    style={
      Object {
        "marginRight": 16,
      }
    }
  >
    <blockies
      bgColor="#ffffff"
      scale={5}
      seed=""
      size={8}
      spotColor="#008ec2"
    />
  </View>
  <View
    style={
      Object {
        "display": "flex",
        "flexDirection": "column",
        "flexGrow": 1,
      }
    }
  >
    <TextInput
      multiline={true}
      numberOfLines={1}
      onBlur={[Function]}
      onChangeText={
        [MockFunction] {
          "calls": Array [
            Array [
              "It seems that this message won't fit. It seems that this message won't fit. It seems that this message won't fit. It seems that this message won't fit. It seems that this message won't fit. It seems that this message won't fit. It seems that this message won't fit. It seems that this message won't fit.",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onFocus={[Function]}
      placeholder="Your chirp"
      placeholderTextColor="#8E8E8E"
      selectTextOnFocus={true}
      style={
        Array [
          Object {
            "color": "#000",
            "fontSize": 20,
            "lineHeight": 26,
            "textAlign": "left",
          },
          Object {
            "alignContent": "flex-end",
            "borderColor": "#000",
            "borderRadius": 8,
            "borderWidth": 1,
            "padding": 16,
          },
        ]
      }
      value=""
    />
    <View
      style={
        Object {
          "alignItems": "center",
          "alignSelf": "flex-end",
          "flexDirection": "row",
          "marginTop": 16,
        }
      }
    >
      <View
        style={
          Object {
            "marginRight": 16,
          }
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "textAlign": "left",
              },
            ]
          }
        >
          300
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={Object {}}
      >
        <RNGestureHandlerButton
          collapsable={false}
          exclusive={true}
          handlerTag={5}
          handlerType="NativeViewGestureHandler"
          onGestureEvent={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onHandlerStateChange={[Function]}
          rippleColor={0}
          touchSoundDisabled={false}
        >
          <View
            accessible={true}
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "backgroundColor": "#3742fa",
                    "borderColor": "#3742fa",
                    "borderRadius": 8,
                    "borderWidth": 1,
                    "padding": 8,
                  },
                  Object {
                    "backgroundColor": "#8E8E8E",
                    "borderColor": "#8E8E8E",
                  },
                ]
              }
            >
              <Text
                style={
                  Array [
                    Object {
                      "color": "#000",
                      "fontSize": 20,
                      "lineHeight": 26,
                      "textAlign": "left",
                    },
                    Object {
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#fff",
                    },
                  ]
                }
              >
                Publish
              </Text>
            </View>
          </View>
        </RNGestureHandlerButton>
      </View>
    </View>
  </View>
</View>
`;

exports[`TextInputChirp renders correctly with placeholder 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#fff",
      "borderColor": "#000",
      "borderRadius": 8,
      "flexDirection": "row",
      "padding": 16,
    }
  }
>
  <View
    style={
      Object {
        "marginRight": 16,
      }
    }
  >
    <blockies
      bgColor="#ffffff"
      scale={5}
      seed=""
      size={8}
      spotColor="#008ec2"
    />
  </View>
  <View
    style={
      Object {
        "display": "flex",
        "flexDirection": "column",
        "flexGrow": 1,
      }
    }
  >
    <TextInput
      multiline={true}
      numberOfLines={1}
      onBlur={[Function]}
      onChangeText={[MockFunction]}
      onFocus={[Function]}
      placeholder="Placeholder"
      placeholderTextColor="#8E8E8E"
      selectTextOnFocus={true}
      style={
        Array [
          Object {
            "color": "#000",
            "fontSize": 20,
            "lineHeight": 26,
            "textAlign": "left",
          },
          Object {
            "alignContent": "flex-end",
            "borderColor": "#000",
            "borderRadius": 8,
            "borderWidth": 1,
            "padding": 16,
          },
        ]
      }
      value=""
    />
    <View
      style={
        Object {
          "alignItems": "center",
          "alignSelf": "flex-end",
          "flexDirection": "row",
          "marginTop": 16,
        }
      }
    >
      <View
        style={
          Object {
            "marginRight": 16,
          }
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "textAlign": "left",
              },
            ]
          }
        >
          300
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={Object {}}
      >
        <RNGestureHandlerButton
          collapsable={false}
          exclusive={true}
          handlerTag={3}
          handlerType="NativeViewGestureHandler"
          onGestureEvent={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onHandlerStateChange={[Function]}
          rippleColor={0}
          touchSoundDisabled={false}
        >
          <View
            accessible={true}
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "backgroundColor": "#3742fa",
                    "borderColor": "#3742fa",
                    "borderRadius": 8,
                    "borderWidth": 1,
                    "padding": 8,
                  },
                  Object {
                    "backgroundColor": "#8E8E8E",
                    "borderColor": "#8E8E8E",
                  },
                ]
              }
            >
              <Text
                style={
                  Array [
                    Object {
                      "color": "#000",
                      "fontSize": 20,
                      "lineHeight": 26,
                      "textAlign": "left",
                    },
                    Object {
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#fff",
                    },
                  ]
                }
              >
                Publish
              </Text>
            </View>
          </View>
        </RNGestureHandlerButton>
      </View>
    </View>
  </View>
</View>
`;

exports[`TextInputChirp renders correctly with undefined public key 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#fff",
      "borderColor": "#000",
      "borderRadius": 8,
      "flexDirection": "row",
      "padding": 16,
    }
  }
>
  <View
    style={
      Object {
        "marginRight": 16,
      }
    }
  >
    {"name":"person","size":40,"color":"black"}
  </View>
  <View
    style={
      Object {
        "display": "flex",
        "flexDirection": "column",
        "flexGrow": 1,
      }
    }
  >
    <TextInput
      multiline={true}
      numberOfLines={1}
      onBlur={[Function]}
      onChangeText={[MockFunction]}
      onFocus={[Function]}
      placeholder="Your chirp"
      placeholderTextColor="#8E8E8E"
      selectTextOnFocus={true}
      style={
        Array [
          Object {
            "color": "#000",
            "fontSize": 20,
            "lineHeight": 26,
            "textAlign": "left",
          },
          Object {
            "alignContent": "flex-end",
            "borderColor": "#000",
            "borderRadius": 8,
            "borderWidth": 1,
            "padding": 16,
          },
        ]
      }
      value=""
    />
    <View
      style={
        Object {
          "alignItems": "center",
          "alignSelf": "flex-end",
          "flexDirection": "row",
          "marginTop": 16,
        }
      }
    >
      <View
        style={
          Object {
            "marginRight": 16,
          }
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "textAlign": "left",
              },
            ]
          }
        >
          300
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={Object {}}
      >
        <RNGestureHandlerButton
          collapsable={false}
          exclusive={true}
          handlerTag={1}
          handlerType="NativeViewGestureHandler"
          onGestureEvent={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onHandlerStateChange={[Function]}
          rippleColor={0}
          touchSoundDisabled={false}
        >
          <View
            accessible={true}
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "backgroundColor": "#3742fa",
                    "borderColor": "#3742fa",
                    "borderRadius": 8,
                    "borderWidth": 1,
                    "padding": 8,
                  },
                  Object {
                    "backgroundColor": "#8E8E8E",
                    "borderColor": "#8E8E8E",
                  },
                ]
              }
            >
              <Text
                style={
                  Array [
                    Object {
                      "color": "#000",
                      "fontSize": 20,
                      "lineHeight": 26,
                      "textAlign": "left",
                    },
                    Object {
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#fff",
                    },
                  ]
                }
              >
                Publish
              </Text>
            </View>
          </View>
        </RNGestureHandlerButton>
      </View>
    </View>
  </View>
</View>
`;

exports[`TextInputChirp renders correctly without placeholder 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#fff",
      "borderColor": "#000",
      "borderRadius": 8,
      "flexDirection": "row",
      "padding": 16,
    }
  }
>
  <View
    style={
      Object {
        "marginRight": 16,
      }
    }
  >
    <blockies
      bgColor="#ffffff"
      scale={5}
      seed=""
      size={8}
      spotColor="#008ec2"
    />
  </View>
  <View
    style={
      Object {
        "display": "flex",
        "flexDirection": "column",
        "flexGrow": 1,
      }
    }
  >
    <TextInput
      multiline={true}
      numberOfLines={1}
      onBlur={[Function]}
      onChangeText={[MockFunction]}
      onFocus={[Function]}
      placeholder="Your chirp"
      placeholderTextColor="#8E8E8E"
      selectTextOnFocus={true}
      style={
        Array [
          Object {
            "color": "#000",
            "fontSize": 20,
            "lineHeight": 26,
            "textAlign": "left",
          },
          Object {
            "alignContent": "flex-end",
            "borderColor": "#000",
            "borderRadius": 8,
            "borderWidth": 1,
            "padding": 16,
          },
        ]
      }
      value=""
    />
    <View
      style={
        Object {
          "alignItems": "center",
          "alignSelf": "flex-end",
          "flexDirection": "row",
          "marginTop": 16,
        }
      }
    >
      <View
        style={
          Object {
            "marginRight": 16,
          }
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "textAlign": "left",
              },
            ]
          }
        >
          300
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={Object {}}
      >
        <RNGestureHandlerButton
          collapsable={false}
          exclusive={true}
          handlerTag={2}
          handlerType="NativeViewGestureHandler"
          onGestureEvent={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onHandlerStateChange={[Function]}
          rippleColor={0}
          touchSoundDisabled={false}
        >
          <View
            accessible={true}
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "backgroundColor": "#3742fa",
                    "borderColor": "#3742fa",
                    "borderRadius": 8,
                    "borderWidth": 1,
                    "padding": 8,
                  },
                  Object {
                    "backgroundColor": "#8E8E8E",
                    "borderColor": "#8E8E8E",
                  },
                ]
              }
            >
              <Text
                style={
                  Array [
                    Object {
                      "color": "#000",
                      "fontSize": 20,
                      "lineHeight": 26,
                      "textAlign": "left",
                    },
                    Object {
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#fff",
                    },
                  ]
                }
              >
                Publish
              </Text>
            </View>
          </View>
        </RNGestureHandlerButton>
      </View>
    </View>
  </View>
</View>
`;
