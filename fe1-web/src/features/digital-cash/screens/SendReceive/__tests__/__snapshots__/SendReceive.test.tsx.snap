// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SendReceive renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "rgb(242, 242, 242)",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              nativeID="animatedComponent"
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            nativeID="animatedComponent"
            pointerEvents="box-none"
            style={
              Object {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                pointerEvents="box-none"
                style={
                  Object {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  nativeID="animatedComponent"
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MockScreen
                </Text>
              </View>
              <View
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          forwardedRef={[Function]}
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              nativeID="animatedComponent"
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <RCTScrollView
                        collapsable={false}
                        onGestureHandlerEvent={[Function]}
                        onGestureHandlerStateChange={[Function]}
                        style={
                          Object {
                            "padding": 16,
                          }
                        }
                      >
                        <View>
                          <Text
                            style={
                              Array [
                                Object {
                                  "color": "#000",
                                  "fontSize": 20,
                                  "lineHeight": 26,
                                  "marginBottom": 16,
                                  "textAlign": "left",
                                },
                                Object {
                                  "fontWeight": "bold",
                                },
                              ]
                            }
                          >
                            Balance
                            : $
                            0
                          </Text>
                          <Text
                            style={
                              Object {
                                "color": "#000",
                                "fontSize": 20,
                                "lineHeight": 26,
                                "marginBottom": 16,
                                "textAlign": "left",
                              }
                            }
                          >
                            You can send cash by entering the public key of the beneficiary below and choosing the amount of cash you would like to transfer. To receive money you canshow your PoP token to the sender. To access the QR code of your PoP token, tab the QRcode icon in the top right of this screen.
                          </Text>
                          <View>
                            <Text
                              style={
                                Array [
                                  Object {
                                    "color": "#000",
                                    "fontSize": 20,
                                    "lineHeight": 26,
                                    "marginBottom": 16,
                                    "textAlign": "left",
                                  },
                                  Object {
                                    "fontWeight": "bold",
                                  },
                                ]
                              }
                            >
                              Beneficiary (-ies)
                            </Text>
                            <View
                              style={
                                Object {
                                  "alignItems": "center",
                                  "flexDirection": "row",
                                }
                              }
                            >
                              <View
                                style={
                                  Object {
                                    "flex": 1,
                                    "flexDirection": "row",
                                  }
                                }
                              >
                                <TextInput
                                  editable={true}
                                  onChangeText={[Function]}
                                  placeholder="QVGlyoTAEYWxq3hSBuawE-lo3sHEyfIv8uizjQTzsIU="
                                  style={
                                    Array [
                                      Object {
                                        "color": "#000",
                                        "fontSize": 20,
                                        "lineHeight": 26,
                                        "marginBottom": 16,
                                        "textAlign": "left",
                                      },
                                      Object {
                                        "backgroundColor": "#fff",
                                        "borderColor": "#fff",
                                        "borderRadius": 8,
                                        "borderWidth": 1,
                                        "flex": 1,
                                        "padding": 8,
                                        "width": 50,
                                      },
                                    ]
                                  }
                                  value=""
                                />
                              </View>
                              <View
                                style={
                                  Object {
                                    "marginLeft": 16,
                                  }
                                }
                              >
                                <RNGestureHandlerButton
                                  collapsable={false}
                                  onGestureEvent={[Function]}
                                  onGestureHandlerEvent={[Function]}
                                  onGestureHandlerStateChange={[Function]}
                                  onHandlerStateChange={[Function]}
                                  rippleColor={0}
                                  style={
                                    Object {
                                      "marginBottom": 16,
                                    }
                                  }
                                >
                                  <View
                                    accessible={true}
                                    collapsable={false}
                                    nativeID="animatedComponent"
                                    style={
                                      Object {
                                        "opacity": 1,
                                      }
                                    }
                                  >
                                    <View
                                      style={
                                        Array [
                                          Object {
                                            "backgroundColor": "#3742fa",
                                            "borderColor": "#3742fa",
                                            "borderRadius": 16,
                                            "borderWidth": 1,
                                            "padding": 8,
                                          },
                                        ]
                                      }
                                    >
                                      <View>
                                        {"name":"ios-scan","size":25,"color":"#fff"}
                                      </View>
                                    </View>
                                  </View>
                                </RNGestureHandlerButton>
                              </View>
                            </View>
                            <Text
                              style={
                                Array [
                                  Object {
                                    "color": "#000",
                                    "fontSize": 20,
                                    "lineHeight": 26,
                                    "marginBottom": 16,
                                    "textAlign": "left",
                                  },
                                  Object {
                                    "fontWeight": "bold",
                                  },
                                ]
                              }
                            >
                              Amount
                            </Text>
                            <View
                              style={
                                Object {
                                  "flex": 1,
                                  "flexDirection": "row",
                                }
                              }
                            >
                              <TextInput
                                editable={true}
                                onChangeText={[Function]}
                                placeholder="42"
                                style={
                                  Array [
                                    Object {
                                      "color": "#000",
                                      "fontSize": 20,
                                      "lineHeight": 26,
                                      "marginBottom": 16,
                                      "textAlign": "left",
                                    },
                                    Object {
                                      "backgroundColor": "#fff",
                                      "borderColor": "#fff",
                                      "borderRadius": 8,
                                      "borderWidth": 1,
                                      "flex": 1,
                                      "padding": 8,
                                      "width": 50,
                                    },
                                  ]
                                }
                                value=""
                              />
                            </View>
                          </View>
                          <RNGestureHandlerButton
                            collapsable={false}
                            onGestureEvent={[Function]}
                            onGestureHandlerEvent={[Function]}
                            onGestureHandlerStateChange={[Function]}
                            onHandlerStateChange={[Function]}
                            rippleColor={0}
                            style={
                              Object {
                                "marginBottom": 16,
                              }
                            }
                          >
                            <View
                              accessible={true}
                              collapsable={false}
                              nativeID="animatedComponent"
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            >
                              <View
                                style={
                                  Array [
                                    Object {
                                      "backgroundColor": "#3742fa",
                                      "borderColor": "#3742fa",
                                      "borderRadius": 16,
                                      "borderWidth": 1,
                                      "padding": 8,
                                    },
                                    Object {
                                      "backgroundColor": "#8E8E8E",
                                      "borderColor": "#8E8E8E",
                                    },
                                  ]
                                }
                              >
                                <Text
                                  style={
                                    Array [
                                      Object {
                                        "color": "#000",
                                        "fontSize": 20,
                                        "lineHeight": 26,
                                        "textAlign": "left",
                                      },
                                      Object {
                                        "textAlign": "center",
                                      },
                                      Object {
                                        "color": "#fff",
                                      },
                                    ]
                                  }
                                >
                                  Send Transaction
                                </Text>
                              </View>
                            </View>
                          </RNGestureHandlerButton>
                        </View>
                      </RCTScrollView>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`SendReceive renders correctly with passed scanned pop token 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "rgb(242, 242, 242)",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              nativeID="animatedComponent"
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            nativeID="animatedComponent"
            pointerEvents="box-none"
            style={
              Object {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                pointerEvents="box-none"
                style={
                  Object {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  nativeID="animatedComponent"
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MockScreen
                </Text>
              </View>
              <View
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          forwardedRef={[Function]}
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              nativeID="animatedComponent"
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <RCTScrollView
                        collapsable={false}
                        onGestureHandlerEvent={[Function]}
                        onGestureHandlerStateChange={[Function]}
                        style={
                          Object {
                            "padding": 16,
                          }
                        }
                      >
                        <View>
                          <Text
                            style={
                              Array [
                                Object {
                                  "color": "#000",
                                  "fontSize": 20,
                                  "lineHeight": 26,
                                  "marginBottom": 16,
                                  "textAlign": "left",
                                },
                                Object {
                                  "fontWeight": "bold",
                                },
                              ]
                            }
                          >
                            Balance
                            : $
                            0
                          </Text>
                          <Text
                            style={
                              Object {
                                "color": "#000",
                                "fontSize": 20,
                                "lineHeight": 26,
                                "marginBottom": 16,
                                "textAlign": "left",
                              }
                            }
                          >
                            You can send cash by entering the public key of the beneficiary below and choosing the amount of cash you would like to transfer. To receive money you canshow your PoP token to the sender. To access the QR code of your PoP token, tab the QRcode icon in the top right of this screen.
                          </Text>
                          <View>
                            <Text
                              style={
                                Array [
                                  Object {
                                    "color": "#000",
                                    "fontSize": 20,
                                    "lineHeight": 26,
                                    "marginBottom": 16,
                                    "textAlign": "left",
                                  },
                                  Object {
                                    "fontWeight": "bold",
                                  },
                                ]
                              }
                            >
                              Beneficiary (-ies)
                            </Text>
                            <View
                              style={
                                Object {
                                  "alignItems": "center",
                                  "flexDirection": "row",
                                }
                              }
                            >
                              <View
                                style={
                                  Object {
                                    "flex": 1,
                                    "flexDirection": "row",
                                  }
                                }
                              >
                                <TextInput
                                  editable={true}
                                  onChangeText={[Function]}
                                  placeholder="QVGlyoTAEYWxq3hSBuawE-lo3sHEyfIv8uizjQTzsIU="
                                  style={
                                    Array [
                                      Object {
                                        "color": "#000",
                                        "fontSize": 20,
                                        "lineHeight": 26,
                                        "marginBottom": 16,
                                        "textAlign": "left",
                                      },
                                      Object {
                                        "backgroundColor": "#fff",
                                        "borderColor": "#fff",
                                        "borderRadius": 8,
                                        "borderWidth": 1,
                                        "flex": 1,
                                        "padding": 8,
                                        "width": 50,
                                      },
                                    ]
                                  }
                                  value="some pop token"
                                />
                              </View>
                              <View
                                style={
                                  Object {
                                    "marginLeft": 16,
                                  }
                                }
                              >
                                <RNGestureHandlerButton
                                  collapsable={false}
                                  onGestureEvent={[Function]}
                                  onGestureHandlerEvent={[Function]}
                                  onGestureHandlerStateChange={[Function]}
                                  onHandlerStateChange={[Function]}
                                  rippleColor={0}
                                  style={
                                    Object {
                                      "marginBottom": 16,
                                    }
                                  }
                                >
                                  <View
                                    accessible={true}
                                    style={
                                      Object {
                                        "opacity": 1,
                                      }
                                    }
                                  >
                                    <View
                                      style={
                                        Array [
                                          Object {
                                            "backgroundColor": "#3742fa",
                                            "borderColor": "#3742fa",
                                            "borderRadius": 16,
                                            "borderWidth": 1,
                                            "padding": 8,
                                          },
                                        ]
                                      }
                                    >
                                      <View>
                                        {"name":"ios-scan","size":25,"color":"#fff"}
                                      </View>
                                    </View>
                                  </View>
                                </RNGestureHandlerButton>
                              </View>
                            </View>
                            <Text
                              style={
                                Array [
                                  Object {
                                    "color": "#000",
                                    "fontSize": 20,
                                    "lineHeight": 26,
                                    "marginBottom": 16,
                                    "textAlign": "left",
                                  },
                                  Object {
                                    "fontWeight": "bold",
                                  },
                                ]
                              }
                            >
                              Amount
                            </Text>
                            <View
                              style={
                                Object {
                                  "flex": 1,
                                  "flexDirection": "row",
                                }
                              }
                            >
                              <TextInput
                                editable={true}
                                onChangeText={[Function]}
                                placeholder="42"
                                style={
                                  Array [
                                    Object {
                                      "color": "#000",
                                      "fontSize": 20,
                                      "lineHeight": 26,
                                      "marginBottom": 16,
                                      "textAlign": "left",
                                    },
                                    Object {
                                      "backgroundColor": "#fff",
                                      "borderColor": "#fff",
                                      "borderRadius": 8,
                                      "borderWidth": 1,
                                      "flex": 1,
                                      "padding": 8,
                                      "width": 50,
                                    },
                                  ]
                                }
                                value=""
                              />
                            </View>
                          </View>
                          <RNGestureHandlerButton
                            collapsable={false}
                            onGestureEvent={[Function]}
                            onGestureHandlerEvent={[Function]}
                            onGestureHandlerStateChange={[Function]}
                            onHandlerStateChange={[Function]}
                            rippleColor={0}
                            style={
                              Object {
                                "marginBottom": 16,
                              }
                            }
                          >
                            <View
                              accessible={true}
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            >
                              <View
                                style={
                                  Array [
                                    Object {
                                      "backgroundColor": "#3742fa",
                                      "borderColor": "#3742fa",
                                      "borderRadius": 16,
                                      "borderWidth": 1,
                                      "padding": 8,
                                    },
                                    Object {
                                      "backgroundColor": "#8E8E8E",
                                      "borderColor": "#8E8E8E",
                                    },
                                  ]
                                }
                              >
                                <Text
                                  style={
                                    Array [
                                      Object {
                                        "color": "#000",
                                        "fontSize": 20,
                                        "lineHeight": 26,
                                        "textAlign": "left",
                                      },
                                      Object {
                                        "textAlign": "center",
                                      },
                                      Object {
                                        "color": "#fff",
                                      },
                                    ]
                                  }
                                >
                                  Send Transaction
                                </Text>
                              </View>
                            </View>
                          </RNGestureHandlerButton>
                        </View>
                      </RCTScrollView>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;
