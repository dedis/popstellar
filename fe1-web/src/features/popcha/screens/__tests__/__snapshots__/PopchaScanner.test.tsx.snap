// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Popcha scanner correct behavior when sending request failed request shows error message 1`] = `
<View
  style={
    {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "zIndex": 0,
      }
    }
  >
    <View />
  </View>
  <View
    style={
      {
        "flex": 1,
        "flexDirection": "column",
        "margin": 16,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "flex": 1,
        }
      }
    >
      <View
        style={
          {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "space-between",
          }
        }
      >
        <View>
          <Text
            style={
              {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "marginBottom": 16,
                "textAlign": "left",
              }
            }
          >
            Hello, here is your laoID: 
            -
            M
            2
            5
            9
            c
            5
            J
            l
            a
            k
            L
            V
            l
            X
            B
            R
            a
            8
            9
            3
            p
            c
            E
            -
            4
            s
            7
            s
            s
            O
            8
            J
            v
            5
            g
            X
            O
            v
            t
            r
            e
            E
            =
          </Text>
          <text />
        </View>
        <View
          style={
            {
              "opacity": 0.5,
            }
          }
        >
          <RNSVGSvgView
            align="xMidYMid"
            bbHeight="300"
            bbWidth="300"
            focusable={false}
            height={300}
            meetOrSlice={0}
            minX={0}
            minY={0}
            style={
              [
                {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                },
                {
                  "flex": 0,
                  "height": 300,
                  "width": 300,
                },
              ]
            }
            vbHeight={494}
            vbWidth={494}
            width={300}
          >
            <RNSVGGroup>
              <RNSVGPath
                d="M392.4 101.2h-22.398v22.398H392.4V101.2Zm44.801-44.801h-112v112h112v-112Zm-22.398 89.602h-67.199V78.802h67.199v67.199Zm-313.6-22.398h22.398v-22.398h-22.398v22.398ZM56.402 168.4h112v-112h-112v112Zm22.402-89.598h67.199v67.199H78.804V78.802Zm313.6 291.2h-22.398V392.4h22.398v-22.398Zm44.801-44.801h-112v112h112v-112Zm-22.398 89.602h-67.199v-67.199h67.199v67.199Zm-156.8-291.2h22.398v-22.398h22.398V78.807h-22.398V56.409h-67.199v22.398h44.801v22.398h-22.398v44.801h22.398v-22.403Zm-22.398 22.398h-22.398v22.398h22.398v-22.398Zm-44.801-22.398v22.398h22.398v-22.398h-22.398Zm0-22.402h22.398V78.803h-22.398v22.398Zm-44.801 112h-22.398v22.398h22.398v-22.398Zm89.602-22.398v22.398h67.199v-22.398H280.41v-44.801h-22.398v44.801h-22.403Zm-22.402-22.402h-22.398v44.801h22.398v-44.801Zm-44.801 22.402h-22.398v22.398h22.398v-22.398Zm-89.598 0v22.398h44.801v-22.398H78.808Zm112 44.801v-22.398H168.41v22.398h22.398Zm-44.801 22.398h22.398v-22.398h-22.398v22.398Zm-89.602-22.398h22.398v-22.398H56.405v22.398Zm0 22.398V280.4h22.398v-22.398H56.405ZM78.807 280.4v22.398h22.398V280.4H78.807Zm-22.402 44.801v44.801h22.398v-22.398h22.398v-22.398l-44.796-.005Zm44.801 44.801h44.801v-22.398h-44.801v22.398Zm246.4-112v-22.398h-22.398v22.398h22.398Zm-156.8 112h-22.398V392.4h22.398v-22.398ZM168.404 392.4h-112v44.801h22.398v-22.398H101.2v22.398h22.398v-22.398h22.398v22.398h67.199v-22.398h-44.801l.01-22.403Zm89.602 44.801v-22.398h-22.398v22.398h22.398Zm22.398 0h22.398v-22.398h-22.398v22.398Zm0-156.8h44.801v-22.398h-22.398v-22.398h-22.398v22.398h-22.398v67.199h44.801v-22.398h-22.398l-.01-22.403Zm-67.199 134.4h22.398v-22.398h-22.398v22.398Zm-44.801-89.602h-22.398v22.398h44.801v-44.801h-22.398l-.005 22.403ZM146.006 258h-22.398v-22.398H101.21v44.801h22.398v22.398H101.21v22.398h44.801L146.006 258Zm89.602 112v22.398h22.398V370h22.398v22.398h22.398v-44.801h-67.199v-44.801h-22.398v67.199l22.403.005Zm-67.203-89.602h22.398v22.398h22.398v-22.398h22.398V258H168.4l.005 22.398Zm44.801-44.797h22.398v-22.398h-22.398v22.398Zm22.402 0v22.398h22.398v-22.398h-22.398Zm89.598 0v-22.398h-22.398v22.398h22.398Zm22.402-44.801H325.21v22.398h22.398V190.8Zm22.398 0v44.801h22.398V190.8h-22.398Zm0 89.598v22.398h22.398v-22.398h22.398V258H437.2v-44.801h-22.398v22.398h-22.398v22.398h-44.801v22.398l22.403.005ZM325.205 302.8h22.398v-22.398h-22.398V302.8ZM414.807.4v22.398h56v56h22.398V.4h-78.398Zm-392 22.402h56V.404H.409v78.398h22.398v-56Zm0 392H.409V493.2h78.398v-22.398h-56v-56Zm448 56h-56V493.2h78.398v-78.398h-22.398v56Zm-33.602-168v-22.398h-22.398v22.398h22.398Z"
                fill={
                  {
                    "payload": 4294967295,
                    "type": 0,
                  }
                }
                propList={
                  [
                    "fill",
                  ]
                }
              />
            </RNSVGGroup>
          </RNSVGSvgView>
        </View>
        <View>
          <View
            style={
              {
                "backgroundColor": "#fff",
                "borderRadius": 8,
                "padding": 8,
              }
            }
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              testID="popcha_scanner_button"
            >
              <RNGestureHandlerButton
                collapsable={false}
                delayLongPress={600}
                enabled={true}
                exclusive={true}
                handlerTag={31}
                handlerType="NativeViewGestureHandler"
                onGestureEvent={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onHandlerStateChange={[Function]}
                rippleColor={0}
                touchSoundDisabled={false}
              >
                <View
                  accessible={true}
                  collapsable={false}
                  style={
                    {
                      "opacity": 1,
                    }
                  }
                >
                  <Text
                    style={
                      [
                        {
                          "color": "#000",
                          "fontSize": 20,
                          "lineHeight": 26,
                          "textAlign": "left",
                        },
                        {
                          "color": "#3742fa",
                        },
                      ]
                    }
                  >
                    Close Scanner
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      style={
        {
          "flexDirection": "column",
        }
      }
    >
      <View
        style={
          {
            "alignSelf": "flex-end",
            "backgroundColor": "#fff",
            "borderRadius": 8,
            "padding": 8,
          }
        }
      >
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
        >
          <RNGestureHandlerButton
            collapsable={false}
            delayLongPress={600}
            enabled={true}
            exclusive={true}
            handlerTag={32}
            handlerType="NativeViewGestureHandler"
            onGestureEvent={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            onHandlerStateChange={[Function]}
            rippleColor={0}
            touchSoundDisabled={false}
          >
            <View
              accessible={true}
              collapsable={false}
              style={
                {
                  "alignSelf": "flex-end",
                  "marginLeft": "auto",
                  "opacity": 1,
                }
              }
            >
              <View>
                {"name":"ios-camera-reverse","size":25,"color":"#3742fa"}
              </View>
            </View>
          </RNGestureHandlerButton>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`Popcha scanner correct behavior when sending request failed request shows error message 2`] = `
<View
  style={
    {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "zIndex": 0,
      }
    }
  >
    <View />
  </View>
  <View
    style={
      {
        "flex": 1,
        "flexDirection": "column",
        "margin": 16,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "flex": 1,
        }
      }
    >
      <View
        style={
          {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "space-between",
          }
        }
      >
        <View>
          <Text
            style={
              {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "marginBottom": 16,
                "textAlign": "left",
              }
            }
          >
            Hello, here is your laoID: 
            -
            M
            2
            5
            9
            c
            5
            J
            l
            a
            k
            L
            V
            l
            X
            B
            R
            a
            8
            9
            3
            p
            c
            E
            -
            4
            s
            7
            s
            s
            O
            8
            J
            v
            5
            g
            X
            O
            v
            t
            r
            e
            E
            =
          </Text>
          <text />
        </View>
        <View
          style={
            {
              "opacity": 0.5,
            }
          }
        >
          <RNSVGSvgView
            align="xMidYMid"
            bbHeight="300"
            bbWidth="300"
            focusable={false}
            height={300}
            meetOrSlice={0}
            minX={0}
            minY={0}
            style={
              [
                {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                },
                {
                  "flex": 0,
                  "height": 300,
                  "width": 300,
                },
              ]
            }
            vbHeight={494}
            vbWidth={494}
            width={300}
          >
            <RNSVGGroup>
              <RNSVGPath
                d="M392.4 101.2h-22.398v22.398H392.4V101.2Zm44.801-44.801h-112v112h112v-112Zm-22.398 89.602h-67.199V78.802h67.199v67.199Zm-313.6-22.398h22.398v-22.398h-22.398v22.398ZM56.402 168.4h112v-112h-112v112Zm22.402-89.598h67.199v67.199H78.804V78.802Zm313.6 291.2h-22.398V392.4h22.398v-22.398Zm44.801-44.801h-112v112h112v-112Zm-22.398 89.602h-67.199v-67.199h67.199v67.199Zm-156.8-291.2h22.398v-22.398h22.398V78.807h-22.398V56.409h-67.199v22.398h44.801v22.398h-22.398v44.801h22.398v-22.403Zm-22.398 22.398h-22.398v22.398h22.398v-22.398Zm-44.801-22.398v22.398h22.398v-22.398h-22.398Zm0-22.402h22.398V78.803h-22.398v22.398Zm-44.801 112h-22.398v22.398h22.398v-22.398Zm89.602-22.398v22.398h67.199v-22.398H280.41v-44.801h-22.398v44.801h-22.403Zm-22.402-22.402h-22.398v44.801h22.398v-44.801Zm-44.801 22.402h-22.398v22.398h22.398v-22.398Zm-89.598 0v22.398h44.801v-22.398H78.808Zm112 44.801v-22.398H168.41v22.398h22.398Zm-44.801 22.398h22.398v-22.398h-22.398v22.398Zm-89.602-22.398h22.398v-22.398H56.405v22.398Zm0 22.398V280.4h22.398v-22.398H56.405ZM78.807 280.4v22.398h22.398V280.4H78.807Zm-22.402 44.801v44.801h22.398v-22.398h22.398v-22.398l-44.796-.005Zm44.801 44.801h44.801v-22.398h-44.801v22.398Zm246.4-112v-22.398h-22.398v22.398h22.398Zm-156.8 112h-22.398V392.4h22.398v-22.398ZM168.404 392.4h-112v44.801h22.398v-22.398H101.2v22.398h22.398v-22.398h22.398v22.398h67.199v-22.398h-44.801l.01-22.403Zm89.602 44.801v-22.398h-22.398v22.398h22.398Zm22.398 0h22.398v-22.398h-22.398v22.398Zm0-156.8h44.801v-22.398h-22.398v-22.398h-22.398v22.398h-22.398v67.199h44.801v-22.398h-22.398l-.01-22.403Zm-67.199 134.4h22.398v-22.398h-22.398v22.398Zm-44.801-89.602h-22.398v22.398h44.801v-44.801h-22.398l-.005 22.403ZM146.006 258h-22.398v-22.398H101.21v44.801h22.398v22.398H101.21v22.398h44.801L146.006 258Zm89.602 112v22.398h22.398V370h22.398v22.398h22.398v-44.801h-67.199v-44.801h-22.398v67.199l22.403.005Zm-67.203-89.602h22.398v22.398h22.398v-22.398h22.398V258H168.4l.005 22.398Zm44.801-44.797h22.398v-22.398h-22.398v22.398Zm22.402 0v22.398h22.398v-22.398h-22.398Zm89.598 0v-22.398h-22.398v22.398h22.398Zm22.402-44.801H325.21v22.398h22.398V190.8Zm22.398 0v44.801h22.398V190.8h-22.398Zm0 89.598v22.398h22.398v-22.398h22.398V258H437.2v-44.801h-22.398v22.398h-22.398v22.398h-44.801v22.398l22.403.005ZM325.205 302.8h22.398v-22.398h-22.398V302.8ZM414.807.4v22.398h56v56h22.398V.4h-78.398Zm-392 22.402h56V.404H.409v78.398h22.398v-56Zm0 392H.409V493.2h78.398v-22.398h-56v-56Zm448 56h-56V493.2h78.398v-78.398h-22.398v56Zm-33.602-168v-22.398h-22.398v22.398h22.398Z"
                fill={
                  {
                    "payload": 4294967295,
                    "type": 0,
                  }
                }
                propList={
                  [
                    "fill",
                  ]
                }
              />
            </RNSVGGroup>
          </RNSVGSvgView>
        </View>
        <View>
          <View
            style={
              {
                "backgroundColor": "#fff",
                "borderRadius": 8,
                "padding": 8,
              }
            }
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              testID="popcha_scanner_button"
            >
              <RNGestureHandlerButton
                collapsable={false}
                delayLongPress={600}
                enabled={true}
                exclusive={true}
                handlerTag={31}
                handlerType="NativeViewGestureHandler"
                onGestureEvent={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onHandlerStateChange={[Function]}
                rippleColor={0}
                touchSoundDisabled={false}
              >
                <View
                  accessible={true}
                  collapsable={false}
                  style={
                    {
                      "opacity": 1,
                    }
                  }
                >
                  <Text
                    style={
                      [
                        {
                          "color": "#000",
                          "fontSize": 20,
                          "lineHeight": 26,
                          "textAlign": "left",
                        },
                        {
                          "color": "#3742fa",
                        },
                      ]
                    }
                  >
                    Close Scanner
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      style={
        {
          "flexDirection": "column",
        }
      }
    >
      <View
        style={
          {
            "alignSelf": "flex-end",
            "backgroundColor": "#fff",
            "borderRadius": 8,
            "padding": 8,
          }
        }
      >
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
        >
          <RNGestureHandlerButton
            collapsable={false}
            delayLongPress={600}
            enabled={true}
            exclusive={true}
            handlerTag={32}
            handlerType="NativeViewGestureHandler"
            onGestureEvent={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            onHandlerStateChange={[Function]}
            rippleColor={0}
            touchSoundDisabled={false}
          >
            <View
              accessible={true}
              collapsable={false}
              style={
                {
                  "alignSelf": "flex-end",
                  "marginLeft": "auto",
                  "opacity": 1,
                }
              }
            >
              <View>
                {"name":"ios-camera-reverse","size":25,"color":"#3742fa"}
              </View>
            </View>
          </RNGestureHandlerButton>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`Popcha scanner correct behavior when sending request successful request closes scanner 1`] = `
<View
  style={
    {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "zIndex": 0,
      }
    }
  >
    <View />
  </View>
  <View
    style={
      {
        "flex": 1,
        "flexDirection": "column",
        "margin": 16,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "flex": 1,
        }
      }
    >
      <View
        style={
          {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "space-between",
          }
        }
      >
        <View>
          <Text
            style={
              {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "marginBottom": 16,
                "textAlign": "left",
              }
            }
          >
            Hello, here is your laoID: 
            -
            M
            2
            5
            9
            c
            5
            J
            l
            a
            k
            L
            V
            l
            X
            B
            R
            a
            8
            9
            3
            p
            c
            E
            -
            4
            s
            7
            s
            s
            O
            8
            J
            v
            5
            g
            X
            O
            v
            t
            r
            e
            E
            =
          </Text>
          <text />
        </View>
        <View
          style={
            {
              "opacity": 0.5,
            }
          }
        >
          <RNSVGSvgView
            align="xMidYMid"
            bbHeight="300"
            bbWidth="300"
            focusable={false}
            height={300}
            meetOrSlice={0}
            minX={0}
            minY={0}
            style={
              [
                {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                },
                {
                  "flex": 0,
                  "height": 300,
                  "width": 300,
                },
              ]
            }
            vbHeight={494}
            vbWidth={494}
            width={300}
          >
            <RNSVGGroup>
              <RNSVGPath
                d="M392.4 101.2h-22.398v22.398H392.4V101.2Zm44.801-44.801h-112v112h112v-112Zm-22.398 89.602h-67.199V78.802h67.199v67.199Zm-313.6-22.398h22.398v-22.398h-22.398v22.398ZM56.402 168.4h112v-112h-112v112Zm22.402-89.598h67.199v67.199H78.804V78.802Zm313.6 291.2h-22.398V392.4h22.398v-22.398Zm44.801-44.801h-112v112h112v-112Zm-22.398 89.602h-67.199v-67.199h67.199v67.199Zm-156.8-291.2h22.398v-22.398h22.398V78.807h-22.398V56.409h-67.199v22.398h44.801v22.398h-22.398v44.801h22.398v-22.403Zm-22.398 22.398h-22.398v22.398h22.398v-22.398Zm-44.801-22.398v22.398h22.398v-22.398h-22.398Zm0-22.402h22.398V78.803h-22.398v22.398Zm-44.801 112h-22.398v22.398h22.398v-22.398Zm89.602-22.398v22.398h67.199v-22.398H280.41v-44.801h-22.398v44.801h-22.403Zm-22.402-22.402h-22.398v44.801h22.398v-44.801Zm-44.801 22.402h-22.398v22.398h22.398v-22.398Zm-89.598 0v22.398h44.801v-22.398H78.808Zm112 44.801v-22.398H168.41v22.398h22.398Zm-44.801 22.398h22.398v-22.398h-22.398v22.398Zm-89.602-22.398h22.398v-22.398H56.405v22.398Zm0 22.398V280.4h22.398v-22.398H56.405ZM78.807 280.4v22.398h22.398V280.4H78.807Zm-22.402 44.801v44.801h22.398v-22.398h22.398v-22.398l-44.796-.005Zm44.801 44.801h44.801v-22.398h-44.801v22.398Zm246.4-112v-22.398h-22.398v22.398h22.398Zm-156.8 112h-22.398V392.4h22.398v-22.398ZM168.404 392.4h-112v44.801h22.398v-22.398H101.2v22.398h22.398v-22.398h22.398v22.398h67.199v-22.398h-44.801l.01-22.403Zm89.602 44.801v-22.398h-22.398v22.398h22.398Zm22.398 0h22.398v-22.398h-22.398v22.398Zm0-156.8h44.801v-22.398h-22.398v-22.398h-22.398v22.398h-22.398v67.199h44.801v-22.398h-22.398l-.01-22.403Zm-67.199 134.4h22.398v-22.398h-22.398v22.398Zm-44.801-89.602h-22.398v22.398h44.801v-44.801h-22.398l-.005 22.403ZM146.006 258h-22.398v-22.398H101.21v44.801h22.398v22.398H101.21v22.398h44.801L146.006 258Zm89.602 112v22.398h22.398V370h22.398v22.398h22.398v-44.801h-67.199v-44.801h-22.398v67.199l22.403.005Zm-67.203-89.602h22.398v22.398h22.398v-22.398h22.398V258H168.4l.005 22.398Zm44.801-44.797h22.398v-22.398h-22.398v22.398Zm22.402 0v22.398h22.398v-22.398h-22.398Zm89.598 0v-22.398h-22.398v22.398h22.398Zm22.402-44.801H325.21v22.398h22.398V190.8Zm22.398 0v44.801h22.398V190.8h-22.398Zm0 89.598v22.398h22.398v-22.398h22.398V258H437.2v-44.801h-22.398v22.398h-22.398v22.398h-44.801v22.398l22.403.005ZM325.205 302.8h22.398v-22.398h-22.398V302.8ZM414.807.4v22.398h56v56h22.398V.4h-78.398Zm-392 22.402h56V.404H.409v78.398h22.398v-56Zm0 392H.409V493.2h78.398v-22.398h-56v-56Zm448 56h-56V493.2h78.398v-78.398h-22.398v56Zm-33.602-168v-22.398h-22.398v22.398h22.398Z"
                fill={
                  {
                    "payload": 4294967295,
                    "type": 0,
                  }
                }
                propList={
                  [
                    "fill",
                  ]
                }
              />
            </RNSVGGroup>
          </RNSVGSvgView>
        </View>
        <View>
          <View
            style={
              {
                "backgroundColor": "#fff",
                "borderRadius": 8,
                "padding": 8,
              }
            }
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              testID="popcha_scanner_button"
            >
              <RNGestureHandlerButton
                collapsable={false}
                delayLongPress={600}
                enabled={true}
                exclusive={true}
                handlerTag={29}
                handlerType="NativeViewGestureHandler"
                onGestureEvent={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onHandlerStateChange={[Function]}
                rippleColor={0}
                touchSoundDisabled={false}
              >
                <View
                  accessible={true}
                  collapsable={false}
                  style={
                    {
                      "opacity": 1,
                    }
                  }
                >
                  <Text
                    style={
                      [
                        {
                          "color": "#000",
                          "fontSize": 20,
                          "lineHeight": 26,
                          "textAlign": "left",
                        },
                        {
                          "color": "#3742fa",
                        },
                      ]
                    }
                  >
                    Close Scanner
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      style={
        {
          "flexDirection": "column",
        }
      }
    >
      <View
        style={
          {
            "alignSelf": "flex-end",
            "backgroundColor": "#fff",
            "borderRadius": 8,
            "padding": 8,
          }
        }
      >
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
        >
          <RNGestureHandlerButton
            collapsable={false}
            delayLongPress={600}
            enabled={true}
            exclusive={true}
            handlerTag={30}
            handlerType="NativeViewGestureHandler"
            onGestureEvent={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            onHandlerStateChange={[Function]}
            rippleColor={0}
            touchSoundDisabled={false}
          >
            <View
              accessible={true}
              collapsable={false}
              style={
                {
                  "alignSelf": "flex-end",
                  "marginLeft": "auto",
                  "opacity": 1,
                }
              }
            >
              <View>
                {"name":"ios-camera-reverse","size":25,"color":"#3742fa"}
              </View>
            </View>
          </RNGestureHandlerButton>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`Popcha scanner scanner renders correctly closed scanner renders correctly 1`] = `
<View
  style={
    {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "zIndex": 0,
      }
    }
  />
  <View
    style={
      {
        "flex": 1,
        "flexDirection": "column",
        "margin": 16,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "flex": 1,
        }
      }
    >
      <View
        style={
          {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "space-between",
          }
        }
      >
        <View>
          <Text
            style={
              {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "marginBottom": 16,
                "textAlign": "left",
              }
            }
          >
            Hello, here is your laoID: 
            -
            M
            2
            5
            9
            c
            5
            J
            l
            a
            k
            L
            V
            l
            X
            B
            R
            a
            8
            9
            3
            p
            c
            E
            -
            4
            s
            7
            s
            s
            O
            8
            J
            v
            5
            g
            X
            O
            v
            t
            r
            e
            E
            =
          </Text>
          <text />
        </View>
        <View>
          <View
            style={
              {
                "backgroundColor": "#fff",
                "borderRadius": 8,
                "padding": 8,
              }
            }
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              testID="popcha_scanner_button"
            >
              <RNGestureHandlerButton
                collapsable={false}
                delayLongPress={600}
                enabled={true}
                exclusive={true}
                handlerTag={1}
                handlerType="NativeViewGestureHandler"
                onGestureEvent={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onHandlerStateChange={[Function]}
                rippleColor={0}
                touchSoundDisabled={false}
              >
                <View
                  accessible={true}
                  collapsable={false}
                  style={
                    {
                      "opacity": 1,
                    }
                  }
                >
                  <Text
                    style={
                      [
                        {
                          "color": "#000",
                          "fontSize": 20,
                          "lineHeight": 26,
                          "textAlign": "left",
                        },
                        {
                          "color": "#3742fa",
                        },
                      ]
                    }
                  >
                    Open Scanner
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      style={
        {
          "flexDirection": "column",
        }
      }
    >
      <View
        style={
          {
            "alignSelf": "flex-end",
            "backgroundColor": "#fff",
            "borderRadius": 8,
            "padding": 8,
          }
        }
      >
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
        >
          <RNGestureHandlerButton
            collapsable={false}
            delayLongPress={600}
            enabled={true}
            exclusive={true}
            handlerTag={2}
            handlerType="NativeViewGestureHandler"
            onGestureEvent={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            onHandlerStateChange={[Function]}
            rippleColor={0}
            touchSoundDisabled={false}
          >
            <View
              accessible={true}
              collapsable={false}
              style={
                {
                  "alignSelf": "flex-end",
                  "marginLeft": "auto",
                  "opacity": 1,
                }
              }
            >
              <View>
                {"name":"ios-camera-reverse","size":25,"color":"#3742fa"}
              </View>
            </View>
          </RNGestureHandlerButton>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`Popcha scanner scanner renders correctly opened scanner renders correctly 1`] = `
<View
  style={
    {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "zIndex": 0,
      }
    }
  >
    <View />
  </View>
  <View
    style={
      {
        "flex": 1,
        "flexDirection": "column",
        "margin": 16,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "flex": 1,
        }
      }
    >
      <View
        style={
          {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "space-between",
          }
        }
      >
        <View>
          <Text
            style={
              {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "marginBottom": 16,
                "textAlign": "left",
              }
            }
          >
            Hello, here is your laoID: 
            -
            M
            2
            5
            9
            c
            5
            J
            l
            a
            k
            L
            V
            l
            X
            B
            R
            a
            8
            9
            3
            p
            c
            E
            -
            4
            s
            7
            s
            s
            O
            8
            J
            v
            5
            g
            X
            O
            v
            t
            r
            e
            E
            =
          </Text>
          <text />
        </View>
        <View
          style={
            {
              "opacity": 0.5,
            }
          }
        >
          <RNSVGSvgView
            align="xMidYMid"
            bbHeight="300"
            bbWidth="300"
            focusable={false}
            height={300}
            meetOrSlice={0}
            minX={0}
            minY={0}
            style={
              [
                {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                },
                {
                  "flex": 0,
                  "height": 300,
                  "width": 300,
                },
              ]
            }
            vbHeight={494}
            vbWidth={494}
            width={300}
          >
            <RNSVGGroup>
              <RNSVGPath
                d="M392.4 101.2h-22.398v22.398H392.4V101.2Zm44.801-44.801h-112v112h112v-112Zm-22.398 89.602h-67.199V78.802h67.199v67.199Zm-313.6-22.398h22.398v-22.398h-22.398v22.398ZM56.402 168.4h112v-112h-112v112Zm22.402-89.598h67.199v67.199H78.804V78.802Zm313.6 291.2h-22.398V392.4h22.398v-22.398Zm44.801-44.801h-112v112h112v-112Zm-22.398 89.602h-67.199v-67.199h67.199v67.199Zm-156.8-291.2h22.398v-22.398h22.398V78.807h-22.398V56.409h-67.199v22.398h44.801v22.398h-22.398v44.801h22.398v-22.403Zm-22.398 22.398h-22.398v22.398h22.398v-22.398Zm-44.801-22.398v22.398h22.398v-22.398h-22.398Zm0-22.402h22.398V78.803h-22.398v22.398Zm-44.801 112h-22.398v22.398h22.398v-22.398Zm89.602-22.398v22.398h67.199v-22.398H280.41v-44.801h-22.398v44.801h-22.403Zm-22.402-22.402h-22.398v44.801h22.398v-44.801Zm-44.801 22.402h-22.398v22.398h22.398v-22.398Zm-89.598 0v22.398h44.801v-22.398H78.808Zm112 44.801v-22.398H168.41v22.398h22.398Zm-44.801 22.398h22.398v-22.398h-22.398v22.398Zm-89.602-22.398h22.398v-22.398H56.405v22.398Zm0 22.398V280.4h22.398v-22.398H56.405ZM78.807 280.4v22.398h22.398V280.4H78.807Zm-22.402 44.801v44.801h22.398v-22.398h22.398v-22.398l-44.796-.005Zm44.801 44.801h44.801v-22.398h-44.801v22.398Zm246.4-112v-22.398h-22.398v22.398h22.398Zm-156.8 112h-22.398V392.4h22.398v-22.398ZM168.404 392.4h-112v44.801h22.398v-22.398H101.2v22.398h22.398v-22.398h22.398v22.398h67.199v-22.398h-44.801l.01-22.403Zm89.602 44.801v-22.398h-22.398v22.398h22.398Zm22.398 0h22.398v-22.398h-22.398v22.398Zm0-156.8h44.801v-22.398h-22.398v-22.398h-22.398v22.398h-22.398v67.199h44.801v-22.398h-22.398l-.01-22.403Zm-67.199 134.4h22.398v-22.398h-22.398v22.398Zm-44.801-89.602h-22.398v22.398h44.801v-44.801h-22.398l-.005 22.403ZM146.006 258h-22.398v-22.398H101.21v44.801h22.398v22.398H101.21v22.398h44.801L146.006 258Zm89.602 112v22.398h22.398V370h22.398v22.398h22.398v-44.801h-67.199v-44.801h-22.398v67.199l22.403.005Zm-67.203-89.602h22.398v22.398h22.398v-22.398h22.398V258H168.4l.005 22.398Zm44.801-44.797h22.398v-22.398h-22.398v22.398Zm22.402 0v22.398h22.398v-22.398h-22.398Zm89.598 0v-22.398h-22.398v22.398h22.398Zm22.402-44.801H325.21v22.398h22.398V190.8Zm22.398 0v44.801h22.398V190.8h-22.398Zm0 89.598v22.398h22.398v-22.398h22.398V258H437.2v-44.801h-22.398v22.398h-22.398v22.398h-44.801v22.398l22.403.005ZM325.205 302.8h22.398v-22.398h-22.398V302.8ZM414.807.4v22.398h56v56h22.398V.4h-78.398Zm-392 22.402h56V.404H.409v78.398h22.398v-56Zm0 392H.409V493.2h78.398v-22.398h-56v-56Zm448 56h-56V493.2h78.398v-78.398h-22.398v56Zm-33.602-168v-22.398h-22.398v22.398h22.398Z"
                fill={
                  {
                    "payload": 4294967295,
                    "type": 0,
                  }
                }
                propList={
                  [
                    "fill",
                  ]
                }
              />
            </RNSVGGroup>
          </RNSVGSvgView>
        </View>
        <View>
          <View
            style={
              {
                "backgroundColor": "#fff",
                "borderRadius": 8,
                "padding": 8,
              }
            }
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              testID="popcha_scanner_button"
            >
              <RNGestureHandlerButton
                collapsable={false}
                delayLongPress={600}
                enabled={true}
                exclusive={true}
                handlerTag={3}
                handlerType="NativeViewGestureHandler"
                onGestureEvent={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onHandlerStateChange={[Function]}
                rippleColor={0}
                touchSoundDisabled={false}
              >
                <View
                  accessible={true}
                  collapsable={false}
                  style={
                    {
                      "opacity": 1,
                    }
                  }
                >
                  <Text
                    style={
                      [
                        {
                          "color": "#000",
                          "fontSize": 20,
                          "lineHeight": 26,
                          "textAlign": "left",
                        },
                        {
                          "color": "#3742fa",
                        },
                      ]
                    }
                  >
                    Close Scanner
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      style={
        {
          "flexDirection": "column",
        }
      }
    >
      <View
        style={
          {
            "alignSelf": "flex-end",
            "backgroundColor": "#fff",
            "borderRadius": 8,
            "padding": 8,
          }
        }
      >
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
        >
          <RNGestureHandlerButton
            collapsable={false}
            delayLongPress={600}
            enabled={true}
            exclusive={true}
            handlerTag={4}
            handlerType="NativeViewGestureHandler"
            onGestureEvent={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            onHandlerStateChange={[Function]}
            rippleColor={0}
            touchSoundDisabled={false}
          >
            <View
              accessible={true}
              collapsable={false}
              style={
                {
                  "alignSelf": "flex-end",
                  "marginLeft": "auto",
                  "opacity": 1,
                }
              }
            >
              <View>
                {"name":"ios-camera-reverse","size":25,"color":"#3742fa"}
              </View>
            </View>
          </RNGestureHandlerButton>
        </View>
      </View>
    </View>
  </View>
</View>
`;
