/* eslint-disable */

import * as wsApi from '../../websockets/WebsocketApi';
import * as wsUtils from '../../websockets/WebsocketUtils';
import * as jsonChecker from './JsonProtocolChecker';
import {getStorageCurrentLao, getStorageKeyPair, initialise} from '../../Store/Storage';
import {Base64Data, Hash, Lao, PublicKey, Timestamp} from "../../Model/Objects";
import {getCurrentTime} from "../../websockets/WebsocketUtils";

const assertChai = require('chai').assert;


// real set of keys generated by tweetnacl
export const mockPublicKey = 'xjHAz+d0udy1XfHp5qugskWJVEGZETN/8DV3+ccOFSs=';
export const mockSecretKey = 'vx0b2hbxwPBQzfPu9NdlCcYmuFjhUFuIUDx6doHRCM7GMcDP53S53LVd8enmq6CyRYlUQZkRM3/wNXf5xw4VKw==';
export const mockCurrentLao = JSON.parse(`{"jsonrpc":"2.0","method":"publish","params":{"channel":"/root","message":{"data":{"object":"lao","action":"create","id":"4T3gIfBzQINCW8mc1dVtrnfNnawgJxVhrJn8BXqsEG4=","name":"sas","creation":1610730679,"organizer":"xjHAz+d0udy1XfHp5qugskWJVEGZETN/8DV3+ccOFSs=","witnesses":[]},"sender":"xjHAz+d0udy1XfHp5qugskWJVEGZETN/8DV3+ccOFSs=","signature":"7iW6kKwguoSRFo/DB37DusfOG0srcjErte4wKQnS3PHCupcYb9bQXPmOEzKNs6/Q2SqJcNqmqE6hbLGRqTezBw==","message_id":"8/Wg+RGcbDEZwH+PHPHOpcKCyhVgD+MaRj7D/KwVwPo=","witness_signatures":[]}},"id":1}`);
export const sampleCreateLaoQuery = `{"jsonrpc":"2.0","method":"publish","params":{"channel":"/root","message":{"data":"eyJvYmplY3QiOiJsYW8iLCJhY3Rpb24iOiJjcmVhdGUiLCJpZCI6InI2bWRsOWxYd2RycytZbXovQWY4M2NPVXpXMU00RTJMMm82LzdRTUdRazQ9IiwibmFtZSI6Im15IGxpbCcgTEFPIDopIiwiY3JlYXRpb24iOjE2MTA3NjI3NDcsIm9yZ2FuaXplciI6InhqSEF6K2QwdWR5MVhmSHA1cXVnc2tXSlZFR1pFVE4vOERWMytjY09GU3M9Iiwid2l0bmVzc2VzIjpbXX0=","sender":"xjHAz+d0udy1XfHp5qugskWJVEGZETN/8DV3+ccOFSs=","signature":"l3KSuJY7pcNAkfKAff29F9U0TYXCEXuBf6YguWneInaKy8/xK722b9YbvePin0eIPU6fjMp2EUp68Zujun+yDg==","message_id":"UMR7xZHjSsExzgve9U3XxU9VVSdNrcCNWZBolkrwiSs=","witness_signatures":[]}},"id":-1}`;

export const mockEventName = 'Random Name';
export const mockLocation = 'EPFL';
export const mockCreationTime = 1609455600;
export const mockStartTime = 1735685990;
export const mockEndTime = 1735686000;
export const mockRollCallId = 100;

/*
//jest.mock('../../websockets/WebsocketApi.ts');
const mockedPublish = wsApi.publish as jest.MockedFunction<typeof wsApi.publish>;


// mock sendRequestToServer in order to not send any query but rather check the correctness of said query
jest.mock('../../websockets/WebsocketApi.ts', () => {

  return {
    // @ts-ignore
    ...jest.requireActual('../../websockets/WebsocketApi.ts'),
    publish: jest.fn((c, a) => checkRequests("", "{}", "{}")),
  };
});
*/


/*
const checkTypicalRequest = (request, methodExpected = 'publish', isRoot = false) => {
  jsonChecker.checkQueryOuterLayer(request);
  jsonChecker.checkQueryMethod(request, methodExpected);
  jsonChecker.checkParams(request.params, isRoot);
  jsonChecker.checkMessage(request.params.message);
};

const checkRequests = (request, object, action) => {

  console.log("correct")

  switch (object) {
    case wsUtils.objects.LAO:

      if (action === wsUtils.actions.CREATE) {
        checkTypicalRequest(request, 'publish', true);
        jsonChecker.checkQueryEmptyWitnessSignature(request);
        jsonChecker.checkQueryDataCreateLao(request, object, action);
      } else if (action === wsUtils.actions.UPDATE_PROPERTIES) {
        checkTypicalRequest(request);
        jsonChecker.checkQueryDataUpdateLao(request, object, action);
      } else if (action === wsUtils.actions.STATE) {
        checkTypicalRequest(request);
        jsonChecker.checkQueryDataStateLao(request, object, action);
      }
      break;

    case wsUtils.objects.MEETING:
      checkTypicalRequest(request);
      jsonChecker.checkQueryDataMeeting(request, object, action);
      break;

    case wsUtils.objects.ROLL_CALL:
      checkTypicalRequest(request);
      jsonChecker.checkQueryDataRollCall(request, object, action);
      break;

    case wsUtils.objects.MESSAGE:
      // isRoot depends of the request
      checkTypicalRequest(request, 'publish', true);
      jsonChecker.checkQueryEmptyWitnessSignature(request);
      jsonChecker.checkQueryDataWitnessMessage(request, object, action);
      break;

    default:
      console.log('unimplemented (in test/websocket/WebsocketApi) : case (default)');
  }

};*/

describe('=== WebsocketApi tests ===', function() {

  beforeAll(() => {
    new Promise((resolve, reject) => {
      initialise();
    });

    const org: PublicKey = getStorageKeyPair().getPublicKey();
    const time: Timestamp = getCurrentTime();
    const name: string = 'Pop\'s LAO';
    const sampleLao: Lao = new Lao(
      name, Hash.fromStringArray(org.toString(), time.toString(), name), time, time, org, []
    );

    getStorageCurrentLao().store(sampleLao);
  });



  /* NOTE: checks are done in checkRequests since wsApi.request* return void */
/*
  describe('websockets.WebsocketApi:mock', function () {
    it('should mock correctly', function () {
      assertChai.strictEqual(wsUtils.getPublicKey(), mockPublicKey);
      assertChai.strictEqual(wsUtils.getSecretKey(), mockSecretKey);
      assertChai.deepEqual(wsUtils.getCurrentLao(), mockCurrentLao);
    });
  });*/


  describe('websockets.WebsocketApi', function () {

    it('should create the correct request for requestCreateLao', function () {
      wsApi.requestCreateLao(mockEventName);
    });

    it('should create the correct request for requestUpdateLao', function () {
      wsApi.requestUpdateLao(mockEventName);
    });

    it('should create the correct request for requestStateLao', function () {
      wsApi.requestStateLao();
    });

    it('should create the correct request for requestCreateMeeting', function () {
      const mockExtra = { numberParticipants: 12, minAge: 18 };
      wsApi.requestCreateMeeting(mockEventName, mockStartTime);
      wsApi.requestCreateMeeting(mockEventName, mockStartTime, mockLocation);
      wsApi.requestCreateMeeting(mockEventName, mockStartTime, mockLocation, mockEndTime);
      wsApi.requestCreateMeeting(mockEventName, mockStartTime, mockLocation, mockEndTime, mockExtra);
    });
/*
    it('should create the correct request for requestStateMeeting', function () {
      wsApi.requestStateMeeting(mockStartTime);
    });
*/
    it('should create the correct request for requestWitnessMessage', function () {
      wsApi.requestWitnessMessage('/root', Base64Data.encode('randomMessageId'));
    });

    it('should create the correct request for requestCreateRollCall', function () {
      const mockScheduledTime = mockStartTime + 1;
      const mockDescription = 'random description';
      wsApi.requestCreateRollCall(mockEventName, mockLocation, mockStartTime);
      wsApi.requestCreateRollCall(mockEventName, mockLocation, undefined, mockScheduledTime);
      wsApi.requestCreateRollCall(mockEventName, mockLocation, mockStartTime, undefined, mockDescription);
      wsApi.requestCreateRollCall(mockEventName, mockLocation, undefined, mockScheduledTime, mockDescription);
    });
/*
    it('should create the correct request for requestOpenRollCall', function () {
      wsApi.requestOpenRollCall(mockRollCallId);
      wsApi.requestOpenRollCall(mockRollCallId, mockStartTime);
    });

    it('should create the correct request for requestReopenRollCall', function () {
      wsApi.requestReopenRollCall(mockRollCallId);
      wsApi.requestReopenRollCall(mockRollCallId, mockStartTime);
    });

    it('should create the correct request for requestCloseRollCall', function () {
      wsApi.requestCloseRollCall(mockRollCallId, []);
      wsApi.requestCloseRollCall(mockRollCallId, [
        "xjHAz+d0udy1XfHp5qugskWJVEGZETN/8DV3+ccOFSs=",
        "mK0eAXHPPlxySr1erjOhZNlKz34/+nJ1hi1Sph66fas="
      ]);
    });*/
  });

});
